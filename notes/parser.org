* parser

token -> ... -> bytecode

ast 过程可以理解为，在递归下降的过程中发现
至于 ir，由于没有跨平台实现的需求，也可以不考虑（只针对 lua vm 实现）


对于 char 到 token 有明显的分辨力，从 token 到 ast 也还可以
但是从 ast 到 bytecode 就差一些

因为
- 流程的实现
- 寄存器的分配

涉及到运行时的具体实现，虽然没有在运行，但是未来的 vm 一定是完全按照 bytecode 在执行的

相当于在脑海中将执行过程模拟了一遍

** EBNF

语法使用 EBNF 描述

上下文无关文法

*** LL(1)

递归下降法

*** caveats

binop 优先级

没有按照 EBNF 来命名

online manual 给出的是不对应的


** 递归下降整体过程

函数调用的递归关系

关键结构 expdesc

funcState

Proto


分析与生成的过程

先不用具体在意生成了哪些 bytecode，整体的生成流程

记录状态和最终存储的数据结构

