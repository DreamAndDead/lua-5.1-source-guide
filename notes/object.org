* object

lua 是一种动态语言，即数据的类型不存在于变量中，而存在于数据本身。

语言本身定义了 8 种数据类型
- nil
- bool
- number
- string
- table
- function
- userdata
- thread

想必了解 lua 的人都不陌生，几乎是所有 lua 书/教程最先讲到的。

** data representation

抽象来说，“数据”本身的概念可以用一个结构来表示，内部可以细分为
- 数据类型
- 数据内容

在 lua 中，这一结构是 TValue

#+NAME: object e.g.
#+begin_src c -n 10 -r
#+INCLUDE: ../lua-5.1.5/src/lobject.h :lines "67-76"
#+end_src

tt 表示数据的类型，value 表示数据的内容。

*** type

类型只是简单的用数字来标识，可以看到其基础类型的宏定义

#+INCLUDE: ../lua-5.1.5/src/lua.h src c :lines "69-83"

完全对应上面提到的 8 种数据类型（TODO light userdata 后面再细说）

*** content

至于 value，数据的内容，用一个 union 结构来表示，有效利用内存空间。

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c :lines "56-65"

不同类型的数据使用不同的键值来存取。

** TODO review struct & union

struct memory

union memory

** non-collectable

lua 本身内建了 gc 机制，用于清除未使用的垃圾对象。

gc 只作用于 lua 内部 alloc 内存且需要私下 free 的对象，

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c :lines "189-190"

即后 5 种数据类型。

它们都通过 gc 来存取。

不需要 gc 的，通过其它键来存取。

*** nil

准确的说，nil 是一个单例对象，代表没有。

只需要用 tt 表示类型即可，不需要用 value 记录内容。



#+INCLUDE: ../lua-5.1.5/src/lobject.h src c :lines "363-366"

#+INCLUDE: ../lua-5.1.5/src/lobject.c src c :lines "27-28"


*** bool

 lua 中的 bool 值是 true/false

 tt 记录类型之后，用 int b = 1/0 表示 true/false。

*** light userdata

 light userdata 表示 c 和 lua 协同的时候，由 c 语言一方表示的数据对象

 lua 这边只负责引用，至于它的生命周期管理，什么时候释放，lua 这边并不清楚，也就不需要过问

 只用 void * p 引用即可

*** number

 默认设定下，lua 中所有数字都用 double 来表示

 #+INCLUDE: ../lua-5.1.5/src/luaconf.h src c :lines "495-506"

 #+INCLUDE: ../lua-5.1.5/src/lua.h src c :lines "98-100"

 tt 表示数字，用 lua_Number n 来存取数字内容


** collectable

GCObject 是一个 union 结构，不同键值对应于不同的类型。

#+INCLUDE: ../lua-5.1.5/src/lstate.h src c :lines "133-146"

这里有一个很巧妙的点

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c :lines "39-52"

GCObject 内部的所有结构都拥有 CommonHeader，作为头部的位置。

这样在引用 GCObject 的时候，可以先通过 gch 来判断类型，再用不同的键值来取数据。

另有一点，gc 中的 tt 和 TValue 中的 tt 是重复的（TODO why？）

以上两点需要注意

*** TODO string



#+INCLUDE: ../lua-5.1.5/src/lobject.h src c :lines "196-208"

*** TODO table

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c :lines "319-349"

*** TODO function

 lfunc.c

 closure is better

 c func

 lua func

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c :lines "287-317"


*** TODO userdata

 c memory

 light

 heavy

*** TODO thread

 later, after vm


*** internal

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c :lines "19-30"

在 8 种数据类型的基础上，枚举进行拓展

新增了 proto upval 和 deadkey(TODO)

proto 在 GCObject 用 p 来存取
upval 则是 uv


** practice

阅读更多






