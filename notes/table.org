#+SETUPFILE: setup.org

* TODO table

- num not in array part, before hash nodes part?
- how to decide array size
  - largest size where n/2 are used (use log method to iterate)

学习 lua 的人都有困惑，lua 中只有 table 而没有 array，
换句话说，用 table 同时表示 array 和 dict 的概念。

如果将数组，看作 k 为整数的一种特殊情况，也无不可。
毕竟使用者只是从使用感觉上来区分两者的。

lua 内部出于效率考虑，有特别的实现方式。

** feature

table 核心上来说，是一个 hash 结构。
table 的作用是，是 get set kv 对。

约定，在 lua 中，k 不能是 nil。如果 v 是 nil，代表删除 k。

array 可以理解为是 hash 结构，不过 key 是整数罢了。
所以 array 的概念也一同由 table 表示了。

array 默认的索引从 1 开始。

#+begin_src lua
local a = {1, 2, 3, 4}
assert(a[1] == 1, "index start from 1")
#+end_src

最重要的特点，之前已经用 TValue 统一表示了所有数据类型。
所以 table 的 k v 可以是任意 lua 数据（nil 是例外）。
无论是 function 还是 string。这是一个非常大的自由度。

** data representation
   :LOGBOOK:
   - Note taken on [2020-12-03 四 10:40] \\
     lastfree 的作用？
   :END:

table 的结构很简明，

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c -n 319 :lines "319-349"

事实上，为了效率，table 还是将 array 部分 和 dict 部分分开存储

** dict

先来看 dict 部分，
- lsizenode，指 node 桶的大小 Log2，桶的大小总是 2 的幂，进行 2 倍的伸缩（缩？）
- node，桶
- lastfree，？初始在 node array 的最后，索引 size，（不会超出数组本身吗？）
  
Node 代表一个 kv 存储
- i_val
- i_key

不是桶的实现，
根据 key 的 hash 值，放到不同的位置中，不同于 tstring 的实现

TKey 中使用的技巧，保留了 TKey 的 value 的同时，添加了 next 指针。
和 gch 使用一样的技巧。

next 用于在发生位置碰撞时，将所有相同 hash 的 key 的 node chain 起来。

这样，一些相关的宏就容易理解了

#+INCLUDE: ../lua-5.1.5/src/ltable.h src c -n 13 :lines "13-19"


*** method

dict 部分有 3 个核心方法

get 和 set，发挥 dict 的作用

另外，需要一种方法，决定相应的 node 存储在什么位置，这一点通过 hash 来计算。

相应 node 的位置称为 main position。

get 和 set 之前，必须先找到对应的 main position 才能进一步进行下一步操作。

- ~mainposition~
- ~luaH_set~
- ~luaH_get~

**** main position

前面提到，除了 nil，其它 7 种类型都可以作为 key

对于相应的类型，分别计算其 hash 值
- bool，直接取 0 1
- string，使用其自身的 hash（复习 string chapter）
- 其实分为两部分处理，在 get 方法中，如果 num 是 int 类型，可直接使用 number 值，使用 getnum
  如果不是，需要参与运算（可能是浮点），将 double 从位角度，分拆为 unsigned int 来计算和
- 其它类型，将指针地址强制转换为 int 作为 hash
  其中 mod (size - 1) ，地址一般是对齐的，减小碰撞的概率，
  =| 1= 是避免出现 mod 0 的情况
  - lightudata 和 gc 各自的指针

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 50 :lines "50-64"

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 96 :lines "81-114"

**** TODO set key
     :LOGBOOK:
     - Note taken on [2020-12-03 四 11:38] \\
       hash use a mix of chained scatter table with brent's variation?
     :END:

~luaH_set~ 中只有 key 参数，而没有 v 参数。
它只返回 key 在 table 中相应 node 的 tvalue *，至于如何修改，则由外部调用者决定

并不是桶的实现，因为如果出现碰撞，则找到一个 freepos，用 next 串联起来，相当于是数组链表

=luaH_set= 进行基本的检测，如果找到位置，直接返回

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 494 :lines "494-506"

若没有，则使用 =newkey= 新建 node，其中 key 为参数，value 则作为返回值

=newkey=
- 先找到 key 的 mp
- 如果 mp 上已经有元素
  - 如果它已经在其位置上，则将 key 放置在 freepos，链接起来
  - 如果它不在位置，则由其 mp 位置，一直 next 找到其 previous 位置
    将 key 放在 mp 位置，另外放在 freepos，并改变指针的指向

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 392 :lines "392-430"

#+CAPTION: new key process

**** get

有了 set 阶段对内存结构的理解，get 就很容易理解

get 方法的核心很简单，先计算得到 main pos，再一路 next 寻找相同的 key，
找到则返回其 node 中存在的 v，没有则返回 nil

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 466 :lines "466-492"
    
** array

没有 array 一开始令学习 lua 的人困惑，尤其是通过 table 来表示数组
且默认索引从 1 开始

array part 只存储 正整数索引（>= 1） 表示的键值对。

数字索引的 kv 自然可以用 hash 的结构来存储，但是引入 array part 来存储，
是出于效率的原因。

在 C 语言中，直接通过数字索引到数组的元素效率是非常高的

将部分数字索引的 kv 放在 * array 中，将其索引对应起来，提高存取效率。

1 -> 0
2 -> 1

有 1 个位置偏移。


如果

#+begin_src lua
local t = {1, 2, 3, 4}
#+end_src

这样紧密的情况下，全部使用 array part 来存储，自然效率是最高的，完全看作一个数组。

如果

#+begin_src lua
local t = {1, 2, 3, 4, [1000] = 1000}
#+end_src

其中全部是整数索引，但是最大的索引是 1000，

如果这种情况下，使用 1000 大小的 TValue 来存储就不划算，中间浪费的空间太多了
没有明显设置的值，如果直接索引就是 nil 值。

lua 使用这样的方式来决定使用多大的 array 来存储整数索引的 kv。

找到一个最大的整数 n，其中 0 到 n 之前至少有 n/2 个整数是有值的。

以上面的例子，n = 8



array part 在 table 中，就是一个 TValue 数组，
- TValue * array
- int sizearray

一个记录当前 array part 的大小，一个是存储空间

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c -n 338 :lines "338-349"

*** hash num

- TODO avoid -0?

- 从字节角度，将 double 分为多个 unsigned int
- 所有 int 求和，得到 hash
- mod size node，得到 num 的 mp

*** get num

=luaH_get=

- 如果 key 是 number 和 int，使用 =luaH_getnum=
  是浮点，则正常使用 =hashnum=
- 在 =luaH_getnum= 中，在 1 - sizearray 范围内，可以直接索引
  否则，还是通过 =hashnum= ，从 hash 部分搜索


*** set num

使用 newkey 的逻辑

TODO setnum 没有特殊处理？直接使用 hashnum。何时使用 array index 添加？

可能只有在 rehash 的时候，才会将相应的 整数 key 移动到 array 部分
先计算大小，再进行迁移

** TODO next

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 116 :lines "116-180"

=luaH_next=

被 lapi.c lua_next 使用

应用在 baselib tablelib 的 foreach 中

TODO deadkey?

findindex 返回
- -1，是开始
- 在 sizearray 范围内，直接返回
- 计算 mp，在 next 链中寻找 key，返回 sizearray + node偏移


将 array node 并起来，从前到后，遍历所有元素

以 nil 开始

每次将 key, key+1 置为 next key, next key value，
一直到没有元素


最后和 ltablib foreach 以及 c api 结合起来，会理解的更为深刻

** TODO rehash

rehash -> resize

- 先进行 size 计算，多少用于 array，多少用于 hash
- 巧妙，使用 log pow 来统计


computesizes 中

twotoi/2 < *narray 的条件，是因为如果不符合，则 twotoi 一定不符合
因为其中所有元素小于 size 的一半，一定不符合 array size 的选择

if a == *narray break

是一个优化，如果元素出现的非常密集，在前方
继续统计也没有意义，nums[i] 都是 0，（好像不完全正确？）

累计的应该是 1 2 4 8 之类

相当于，如果 a == *narray，则 a 最大为 twotoi

a 统计的是 < 2^i 的个数 == twotoi

既然已经统计结束，则下一轮，twotoi * 2 必定大于 a 的 2 倍

不符合查找条件


** TODO metatable

tagmethod cache

机制不在这里发生作用

** TODO graph list

- data structure first
- process after
- how to namingc

** practice


