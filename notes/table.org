#+SETUPFILE: setup.org

* TODO table

- num not in array part, before hash nodes part?
- how to decide array size
  - largest size where n/2 are used (use log method to iterate)

学习 lua 的人都有困惑，lua 中只有 table 而没有 array，
换句话说，用 table 同时表示 array 和 dict 的概念。

如果将数组，看作 k 为整数的一种特殊情况，也无不可。
毕竟使用者只是从使用感觉上来区分两者的。

lua 内部出于效率考虑，有特别的实现方式。

** feature

table 核心上来说，是一个 hash 结构。
table 的作用是，是 get set kv 对。

约定，在 lua 中，k 不能是 nil。如果 v 是 nil，代表删除 k。

array 可以理解为是 hash 结构，不过 key 是整数罢了。
所以 array 的概念也一同由 table 表示了。

array 默认的索引从 1 开始。

#+begin_src lua
local a = {1, 2, 3, 4}
assert(a[1] == 1, "index start from 1")
#+end_src

最重要的特点，之前已经用 TValue 统一表示了所有数据类型。
所以 table 的 k v 可以是任意 lua 数据（nil 是例外）。
无论是 function 还是 string。这是一个非常大的自由度。

** data representation

table 的结构很简明，

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c -n 319 :lines "319-349"

事实上，为了效率，table 还是将 array 部分 和 dict 部分分开存储

** dict

先来看 dict 部分，
- lsizenode，指 node 桶的大小 Log2，桶的大小总是 2 的幂，进行 2 倍的伸缩（缩？）
- node，桶
- lastfree，初始化在 node array 的最后，刚好在 size 边界外，
  和 getfreepos 配合使用，由后向前，进行 node 的遍历，如果 key 为 nil，说明其
  为未使用空间，因为 nil 作为 key 是无法被 set 的
  
Node 代表一个 kv 存储
- i_val
- i_key

不是桶的实现，
根据 key 的 hash 值，放到不同的位置中，不同于 tstring 的实现

TKey 中使用的技巧，保留了 TKey 的 value 的同时，添加了 next 指针。
和 gch 使用一样的技巧。

next 用于在发生位置碰撞时，将所有相同 hash 的 key 的 node chain 起来。

这样，一些相关的宏就容易理解了

#+INCLUDE: ../lua-5.1.5/src/ltable.h src c -n 13 :lines "13-19"


*** method

dict 部分有 3 个核心方法

get 和 set，发挥 dict 的作用

另外，需要一种方法，决定相应的 node 存储在什么位置，这一点通过 hash 来计算。

相应 node 的位置称为 main position。

get 和 set 之前，必须先找到对应的 main position 才能进一步进行下一步操作。

- ~mainposition~
- ~luaH_set~
- ~luaH_get~

**** main position
     :LOGBOOK:
     - Note taken on [2020-12-03 四 11:53] \\
       - TODO avoid -0?
     :END:

前面提到，除了 nil，其它 7 种类型都可以作为 key

对于相应的类型，分别计算其 hash 值
- bool，直接取 0 1
- string，使用其自身的 hash（复习 string chapter）
- 其实分为两部分处理，在 get 方法中，如果 num 是 int 类型，可直接使用 number 值，使用 getnum 进一步处理
  如果不是，则是浮点，不能作用数组来理解，将 double 从位角度，分拆为 unsigned int 来计算和
- 其它类型，将指针地址强制转换为 int 作为 hash
  其中 mod (size - 1) ，地址一般是对齐的，减小碰撞的概率，
  =| 1= 是避免出现 mod 0 的情况
  - lightudata 和 gc 各自的指针

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 50 :lines "50-64"

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 96 :lines "81-114"

**** TODO set key
     :LOGBOOK:
     - Note taken on [2020-12-03 四 11:38] \\
       hash use a mix of chained scatter table with brent's variation?
     :END:

~luaH_set~ 中只有 key 参数，而没有 v 参数。
它只返回 key 在 table 中相应 node 的 tvalue *，至于如何修改，则由外部调用者决定

并不是桶的实现，因为如果出现碰撞，则找到一个 freepos，用 next 串联起来，相当于是数组链表

=luaH_set= 进行基本的检测，如果找到位置，直接返回

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 494 :lines "494-506"

若没有，则使用 =newkey= 新建 node，其中 key 为参数，value 则作为返回值

=newkey=
- 先找到 key 的 mp
- 如果 mp 上已经有元素
  - 如果它已经在其位置上，则将 key 放置在 freepos，链接起来
  - 如果它不在位置，则由其 mp 位置，一直 next 找到其 previous 位置
    将 key 放在 mp 位置，另外放在 freepos，并改变指针的指向

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 392 :lines "392-430"

#+CAPTION: new key process

**** get

有了 set 阶段对内存结构的理解，get 就很容易理解

get 方法的核心很简单，先计算得到 main pos，再一路 next 寻找相同的 key，
找到则返回其 node 中存在的 v，没有则返回 nil

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 466 :lines "466-492"
    
** array

当用 table 来表示 array 的概念，默认索引从 1 开始。

相应的，struct Table 中的 TValue *array 只存储正整数索引（>= 1）对应的值。

首先，在 C 语言中，直接通过数字索引到数组的元素效率是非常高的，

将部分数字索引的 kv 放在 * array 中，将其索引对应起来，提高存取效率。

1 -> 0
2 -> 1

有 1 个位置偏移。

其次，可以节省空间，因为 node 中的 key 和 val 两个部分，但是如果用 array 来存储，
就节省了 key 的空间。


采用这样的安排后，一个主要问题就出现了，使用时候用 array 部分，使用时候用 node 部分？

如果

#+begin_src lua
local t = {1, 2, 3, 4}
#+end_src

这样紧密的情况下，全部使用 array part 来存储，自然效率是最高的，完全看作一个数组。

如果

#+begin_src lua
local t = {1, 2, 3, 4, [1000] = 1000}
#+end_src

其中全部是整数索引，但是最大的索引是 1000，

如果这种情况下，使用 1000 大小的 TValue 来存储就不划算，中间空余所浪费的空间太多了
比如 70， 900，没有明显设置的值，如果直接索引就是 nil 值。


lua 基于这样的思路，使用一种权衡的的方式来决定使用多大的 array 来存储整数索引的 kv。

找到一个最大的整数 n，其中 0 到 n 之前至少有 n/2 个整数是有值的。
这样至少可以保持 50% 的利用率。


array 在 table 中，只是单纯用 TValue 数组来存储，
- TValue * array，存储
- int sizearray，当前 array 的空间大小

#+INCLUDE: ../lua-5.1.5/src/lobject.h src c -n 338 :lines "338-349"


与 dict 部分相同，array 也有 2 个核心方法
- get
- set

*** get

本质上，get 返回的是 相应的 key 对应的 v 的存储空间的指针
如果 table 中从没有这个 key，则返回 luaO_nilobject(它是一个指针，而不是值)

在 =luaH_get= 中，对于 number 做了特殊处理
- 如果 key 是 number 和 int，使用 =luaH_getnum=
  是浮点，则正常使用 =hashnum= 来计算

在 =luaH_getnum= 中，在 1 - sizearray 范围内，可以直接索引，即所谓 array part 区域的指针
它是一定不同于 luaO_nilobject 的

否则，还是通过 =hashnum= ，从 dict 部分，顺着 next 进行搜索

如果存在相应的 key，则返回相应的存储空间指针，
没有，则返回 nilobject

*** set
    :LOGBOOK:
    - Note taken on [2020-12-03 四 14:44] \\
      nil 应该是删除键来理解，对于 array part 是不可能删除空间的
      对于 dict 部分，是如何处理删除的？可能只是在 rehash 的时候发生
    - Note taken on [2020-12-03 四 14:43] \\
      dummynode 的作用？
      dummynode 用于表明可用的空间，还没有 key 来使用其空间
      与之相对的， deadkey 只是由 gc 来处理的，标识 deadkey 是当值为 nil 的时候
      但是这部分空间仍然是被占据的
    :END:

在 =luaH_set= 中，先通过 get 来寻找存储空间

通过对 get 的理解，

p != luaO_nilobject

就容易判断了

对于 num，假如在 array part ，则一定返回数组位置，
不在，则像 dict 一样查找，返回相应位置

get 只关注位置，而不关注位置上对应的值

如果没有相应的 key，就使用 newkey 来插入 node（在 array part 的 num 是不可能使用 newkey 的）

这样看来，set 和 get 区别，只是多了 newkey 部分，确保一定返回一个 key 的位置。

** other method
   
*** DRAFT next
    :LOGBOOK:
    - Note taken on [2020-12-03 四 15:44] \\
      TODO deadkey?
      deadkey maybe key with nil value?
    :END:

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 116 :lines "116-180"

=luaH_next=

被 lapi.c lua_next 使用，实现 next 功能
遍历所有元素

findindex，意义是返回 key 的下一个位置
- nil，返回 -1，意味着从头开始，其后访问的所有元素都是 k v 非 nil 的值
  回到 next 中，则访问到 0
- 若是整数，且在 sizearray 范围内，直接 -1 返回，因为 C 索引的关系
- 计算 mp node
  - 如果 node 和 key 相同
  - 或者 如果是 deadkey 但是和 key 的 gc 部分相同，则可认为寻找到
    返回 sizearray + node 中的偏移
    否则在 next 链表中寻找
- 未找到，则用 error 处理（TODO 如何不影响继续运行？）


next
- 通过 findindex，一个 key 会返回平铺序列下的索引
  aaaaaaaaaaadddddddddddddddd
  -----------+---------------
- next 通过这个索引，++，以数组的方式，索引下一个非 nil 值
  - key <- 下一个索引对应的 key
  - key+1 <- 当前 key 对应的 value
- TODO detail 从数组过渡到 dict 的时刻
- TODO 在 dict 时刻如何与 ++ 结合起来
- 对于 dict 部分
  - key <- 当前 key index 对应的 key，在下一轮中，会 ++ 递增
  - key+1 <- 当前 key index 对应的 value


对应 next api，next 每次返回两个值，key 和 value
当 key 为 nil 时，TODO 意味着结束？

TODO 当 next 返回 0 时，意味着结束，上层一定进行了封装，以符合 lua 上层封装的 api

这里直接进行了栈操作，参考 c api

*** TODO rehash
    :LOGBOOK:
    - Note taken on [2020-12-03 四 17:49] \\
      TODO resize 操作
    - Note taken on [2020-12-03 四 17:46] \\
      TODO 理解 computesizes
    :END:

在 newkey 进行插入的时候，如果发生了空间不足
就会引发 rehash 操作

因为不同于 hash bucket，允许碰撞插入

table 是数组链表的形式，没有空间就没办法了，只能进行扩展。


入口是 rehash 方法
- 先进行 array 部分的统计
  这里的统计很巧妙，使用 log2 数组进行统计，a[i] 表示数组索引在 2^(i-1) - 2^i 的数量
  - 先统计 array part 的数量
  - 再统计 dict part 的数量
  - 不要遗漏最新要添加的值（没有判断去重？和调用 rehash 的时机有关，在 newkey 的时候，必定是不会重复的）

computesizes，计算新的 array part 的大小，需要一些理解

twotoi/2 < *narray 的条件，是因为如果不符合，则 twotoi 一定不符合
因为其中所有元素小于 size 的一半，一定不符合 array size 的选择

if a == *narray break

是一个优化，如果元素出现的非常密集，在前方
继续统计也没有意义，nums[i] 都是 0，（好像不完全正确？）

累计的应该是 1 2 4 8 之类

相当于，如果 a == *narray，则 a 最大为 twotoi

a 统计的是 < 2^i 的个数 == twotoi

既然已经统计结束，则下一轮，twotoi * 2 必定大于 a 的 2 倍

不符合查找条件


得到大小之后，进行 resize 操作



*** TODO len

如何确定 table 的长度？

长度是针对 array 的含义而言的

getn，含义针对于数组，因为并没有对 dict 进行搜索，只针对整数索引
- 先取得 sizearray 的大小
  - 如果最后的值是 nil，就要在数组中搜索出一个边界，使用二分法，找到 i j
    i 不是 nil 而 j 是 nil
    i 就是所谓的长度
  - 若数组是满的
    - 没有 dict 部分，直接返回
    - 有 dict 部分，则继续搜索，因为可能有部分整数值，在 dict 部分存储
      - 先 2 倍进行扩张
	- 如果超过最值，bad purpose?
      - 在 i 和 j (2 * i) 中进行 2 分，找到一个边界值




#+begin_src lua
> t = {1,2,3,4,5,6}
> print(#t)
6
> t[3] = nil
> print(#t)
6
> t[6] = nil
> print(#t)
2
#+end_src

=#= 本身的行为，在 array 有空洞的时候，对于不理解底层机制的用户，表现出的行为是“不确定的”

** TODO metatable

tagmethod cache

机制不在这里发生作用

** practice

new/free

get/set num/str

考虑将 rehash 的部分放到这里，非重点

