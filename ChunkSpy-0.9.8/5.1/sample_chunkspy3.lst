; source chunk: sample.out
; x86 standard (32-bit, little endian, doubles)

; function [0] definition (level 1)
; 0 upvalues, 0 params, 7 stacks
.function  0 0 2 7
.local  "a"  ; 0
.local  "(for index)"  ; 1
.local  "(for limit)"  ; 2
.local  "(for step)"  ; 3
.local  "i"  ; 4
.local  "(for generator)"  ; 5
.local  "(for state)"  ; 6
.local  "(for control)"  ; 7
.local  "i"  ; 8
.const  1  ; 0
.const  "b"  ; 1
.const  "the quick brown fox\r\n"  ; 2
.const  "c"  ; 3
.const  10  ; 4
.const  2  ; 5
.const  false  ; 6
.const  "d"  ; 7

; function [0] definition (level 2)
; 1 upvalues, 0 params, 2 stacks
.function  1 0 0 2
.upvalue  "a"  ; 0
.const  "b"  ; 0
; (2)  function c() b = a a = b end
[1] getupval   0   0        ; a
[2] setglobal  0   0        ; b
[3] getglobal  0   0        ; b
[4] setupval   0   0        ; a
[5] return     0   1      
; end of function

; (1)  local a = 1; b = "the quick brown fox\r\n"
[01] loadk      0   0        ; 1
[02] loadk      1   2        ; "the quick brown fox\r\n"
[03] setglobal  1   1        ; b
; (2)  function c() b = a a = b end
[04] closure    1   0        ; 1 upvalues
[05] move       0   0      
[06] setglobal  1   3        ; c
; (3)  c = nil; c = -a; c = not b
[07] loadnil    1   1      
[08] setglobal  1   3        ; c
[09] unm        1   0      
[10] setglobal  1   3        ; c
[11] getglobal  1   1        ; b
[12] not        1   1      
[13] setglobal  1   3        ; c
; (4)  for i = 1, 10 do a = a + 2 c() end
[14] loadk      1   0        ; 1
[15] loadk      2   4        ; 10
[16] loadk      3   0        ; 1
[17] forprep    1   3        ; to [21]
[18] add        0   0   261  ; 2
[19] getglobal  5   3        ; c
[20] call       5   1   1  
[21] forloop    1   -4       ; to [18] if loop
; (5)  a = {}; a[1] = false; b = a[1]
[22] newtable   1   0   0    ; array=0, hash=0
[23] move       0   1      
[24] settable   0   256 262  ; 1 false
[25] gettable   1   0   256  ; 1
[26] setglobal  1   1        ; b
; (6)  a = d..c..b; a = b == c; a = {1,2,}
[27] getglobal  1   7        ; d
[28] getglobal  2   3        ; c
[29] getglobal  3   1        ; b
[30] concat     0   1   3  
[31] getglobal  1   1        ; b
[32] getglobal  2   3        ; c
[33] eq         1   1   2    ; to [35] if false
[34] jmp        1            ; to [36]
[35] loadbool   0   0   1    ; false, to [37]
[36] loadbool   0   1   0    ; true
[37] newtable   1   2   0    ; array=2, hash=0
[38] loadk      2   0        ; 1
[39] loadk      3   5        ; 2
[40] setlist    1   2   1    ; index 1 to 2
[41] move       0   1      
; (7)  for i in b() do b = 1 end
[42] getglobal  1   1        ; b
[43] call       1   1   4  
[44] jmp        2            ; to [47]
[45] loadk      5   0        ; 1
[46] setglobal  5   1        ; b
[47] tforloop   1       1    ; to [49] if exit
[48] jmp        -4           ; to [45]
; (8)  return
[49] return     0   1      
[50] return     0   1      
; end of function

