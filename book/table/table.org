#+SETUPFILE: setup.org

#+TITLE: table
#+DATE: <2020-12-30 三 11:53>

初次接触 lua 的人都有困惑，
多数动态语言都会内建 dict 和 array 的概念，而 lua 用 table 同时表示这两个概念。

所谓 dict 不过是 kv 存储，从某种角度来看，可以将 array 看作 k 是整数的一种特殊情况。

本章就来从源码角度认识 lua 中的 table。

* structure

#+begin_src C -n 338 -r
typedef struct Table {
  CommonHeader;
  lu_byte flags;  /* 1<<p means tagmethod(p) is not present */       (ref:flags)
  lu_byte lsizenode;  /* log2 of size of `node' array */             (ref:lsizenode)
  struct Table *metatable;                                           (ref:metatable)
  TValue *array;  /* array part */                                   (ref:array)
  Node *node;                                                        (ref:node)
  Node *lastfree;  /* any free position is before this position */   (ref:lastfree)
  GCObject *gclist;
  int sizearray;  /* size of `array' array */                        (ref:sizearray)
} Table;
#+end_src

table 的结构并不复杂，除去 CommonHeader 和 gclist，剩余的字段可分为 3 部分。

dict 相关
- [[(node)][Node * node]] ，kv 存储的数组
- [[(lsizenode)][=lu_byte= lsizenode]] ，数组的大小，用 log2 表示
- [[(lastfree)][Node * lastfree]] ，在数组中从尾向前，第一个空闲位置的指针

array 相关
- [[(array)][TValue * array]] ，array 存储的数组
- [[(sizearray)][int sizearray]] ，array 的大小

metatable 相关
- [[(metatable)][struct Table * metatable]] ，metatable 的指针
- [[(flags)][=lu_byte= flags]] ，一个字节，用于缓存加速 meta method 的搜索

从结构中可以发现，table 并不只是单纯的 dict 结构，为了效率，在内部也用 array 的方式进行辅助存储。

下面就 3 个部分，分别讨论

* dict
   :LOGBOOK:
   - Note taken on [2020-12-03 四 14:44] \\
   对于 dict 部分，是如何处理删除的？可能只是在 rehash 的时候发生
   - Note taken on [2020-12-03 四 14:43] \\
   dummynode 用于表明可用的空间，还没有 key 来使用其空间
   与之相对的， deadkey 只是由 gc 来处理的，标识 deadkey 是当值为 nil 的时候
   但是这部分空间仍然是被占据的
   :END:

在 lua 中，用 table 表示 dict 概念，有非常大的自由度。

使用 k v 存储时
- k 不能是 nil
- 若 v 是 nil，表示从 dict 中删除 k v
- 除此之外，k v 可以是任意值，无论是 function 还是 string

本质上来看，这就是用 TValue 统一表示所有“值”所带来的好处。
这一点从 Node 结构中可以清楚的看出来。


#+begin_src C -n 323 -r
typedef union TKey {
  struct {
    TValuefields;
    struct Node *next;  /* for chaining */
  } nk;
  TValue tvk;
} TKey;


typedef struct Node {
  TValue i_val;
  TKey i_key;
} Node;
#+end_src

#+caption: dict node
#+begin_src ditaa :file table-node.png :cmdline -E
    Node                                 TKey
+-----------------+               +-- +------------------------+ --+
| TValue i_val    |               |   | Value value            |   |
+-----------------+               |   +------------------------+   | TValue tvk
|  TKey i_key     |            nk |   | int tt                 |   |
+-----------------+               |   +------------------------+ --+
                                  |   |  next cBLK             |
                                  +-- +------------------------+
#+end_src

#+caption: Node & TKey
#+RESULTS:
[[file:table-node.png]]


Node 代表一个 k v 存储，k v 分别用 =i_key= 和 =i_val= 来表示。
=i_val= 本身是 TValue， =i_key= 是 TKey。

TKey 本身是一个 union，其中用 tvk 来索引本身的值，即 TValue。
另一项 nk 则添加了 next 指针，辅助在 Node 数组中做链接。
所以本质上， =i_key= 也是 TValue。


dict 表示的是多个 kv 的集合，在 table 内部，所有 kv 经过相应的安排，存储在 Node 数组中。

比如下面的代码，在 table 内部将可能会如此表示。

#+begin_src lua :results output
local t = {}

t[print] = true
t[true] = false
t["return"] = 0
t["name"] = "print"
t["tool"] = "dot"
#+end_src

#+caption: dict structure
#+begin_src dot :file table-dict.png
digraph {
	node[shape=record, width=.1, height=.1];
	
	nd[label="
	   {<i> index | <v> i_val | <k> i_key} |
	   {<i0> 0| <v0> true | <k0> #f print} |
	   {<i1> 1| <v1> false  | <k1> true } |
	   {<i2> 2| <v2>  | <k2> } |
	   {<i3> 3| <v3> 0 | <k3> \"return\" } |
	   {<i4> 4| <v4>  | <k4> } |
	   {<i5> 5| <v5>  | <k5> } |
	   {<i6> 6| <v6> \"print\" | <k6> \"name\" } |
	   {<i7> 7| <v7> \"dot\"  | <k7> \"tool\" }
	   "];

	sz[label="lsizenode = log(8) = 3", shape=none];

	lf[label="Node * lastfree"];
	n[label="Node * node"];

	n -> nd:i0:nw;

	lf -> nd:i5:n;
}
#+end_src

#+caption: kv stored in Node array
#+RESULTS:
[[file:table-dict.png]]

至于 kv 存取的方式，在 get set 小节详细讨论。


有了上面的理解，相关的宏也就容易理解了。

#+caption: ltable.h
#+INCLUDE: ../lua-5.1.5/src/ltable.h src c -n 13 :lines "13-19"

#+caption: lobject.h
#+INCLUDE: ../lua-5.1.5/src/lobject.h src c -n 352 :lines "352-361"

** main position

table 内部使用巧妙的方式来存储 kv，其中关键的概念是 main position。

因为 k 可以是任意类型的值，在存储 kv 之前，必须先确定将其安排在什么位置，
这个位置就是 kv 的 main position。

计算的方式并不陌生，先计算 k 的 hash 值，再模除 node 数组长度，得到 main position。

前面提到，k 可以是 nil 之外任意类型的值，所以在计算 main position 的时候，
针对不同的类型有不同的计算方式。

#+caption: ltable.c
#+begin_src C -n 96 -r
/*
,** returns the `main' position of an element in a table (that is, the index
,** of its hash value)
*/
static Node *mainposition (const Table *t, const TValue *key) {
  switch (ttype(key)) {
    case LUA_TNUMBER:
      return hashnum(t, nvalue(key));
    case LUA_TSTRING:
      return hashstr(t, rawtsvalue(key));
    case LUA_TBOOLEAN:
      return hashboolean(t, bvalue(key));
    case LUA_TLIGHTUSERDATA:
      return hashpointer(t, pvalue(key));
    default:
      return hashpointer(t, gcvalue(key));
  }
}
#+end_src

针对不同类型详细来看，

#+caption: ltable.c
#+begin_src C -n 50 -r
#define hashpow2(t,n)      (gnode(t, lmod((n), sizenode(t))))
  
#define hashstr(t,str)  hashpow2(t, (str)->tsv.hash)
#define hashboolean(t,p)        hashpow2(t, p)


/*
,** for some types, it is better to avoid modulus by power of 2, as
,** they tend to have many 2 factors.
*/
#define hashmod(t,n)	(gnode(t, ((n) % ((sizenode(t)-1)|1))))


#define hashpointer(t,p)	hashmod(t, IntPoint(p))
#+end_src

*** string

string 比较简单，依旧使用自身的 hash，再模除 node size 得到 main position。

*** bool

bool 类型更简单，直接锁定了 main position 的 0 1 位置。

*** light userdata

对于 light userdata，强制将 pointer 地址解析为 unsigned int 作为 hash 值，
模除 node size - 1 得到 main position。

因为地址一般按照 2 的幂对齐，而且 node size 也是 2 的幂，直接模除不容易将值分散开来，
所以就使用 node size - 1。

hashmod 末尾的 =| 1= 是避免出现 mod 0 的情况。

*** GCObject
    
同 light userdata，进行指针运算。

*** number

#+caption: ltable.c
#+begin_src C -n 66 -r
/*
,** number of ints inside a lua_Number
*/
#define numints		cast_int(sizeof(lua_Number)/sizeof(int))
#+end_src

#+begin_src C -n 81 -r
/*
,** hash for lua_Numbers
*/
static Node *hashnum (const Table *t, lua_Number n) {
  unsigned int a[numints];
  int i;
  if (luai_numeq(n, 0))  /* avoid problems with -0 */   (ref:neg0)
    return gnode(t, 0);
  memcpy(a, &n, sizeof(a));
  for (i = 1; i < numints; i++) a[0] += a[i];
  return hashmod(t, a[0]);
}
#+end_src

#+caption: number hash
#+begin_src dot :file table-number-hash.png
digraph {
	node[shape=record];

	binary[label="
	      <b1> 01000010 10111011 01001000 11101011 |
	      <b0> 01010111 11100000 00000000 11001010
	       "];

	d[label="3e13 + 0.79"];
	n1[label="1119570155"];
	n0[label="1474298058"];

	d -> binary:w[label="as double"];

	n1 -> binary:b1:n[label="as unsigned int"];
	n0 -> binary:b0:n[label="as unsigned int"];
}
#+end_src

#+RESULTS:
[[file:table-number-hash.png]]


#+begin_src C :exports none
typedef union num {
  double d;
  int i[2];
} num;

num n;

n.d = 3e13 + 0.79;

printf("%d\n", sizeof(num));
printf("%f\n", n.d);
printf("%d %d\n", n.i[1], n.i[0]);
#+end_src

#+RESULTS:
|                 8 |            |
| 30000000000000.79 |            |
|        1119570155 | 1474298058 |


=lua_Number= 默认用 double 来表示，在 32 位系统中，double 通常占用 64 位。
从二进制表示层面，将 double 分拆为 2 个 unsigned int，求和后再模除 node size - 1 得到 main position。

这里要注意两个细节，

一是对 =+0 -0= 做了统一处理。
=+0 -0= 在数值角度上是相等的，但是在二进制浮点表示[fn:2]上，
存在标志位的不同，如果依旧使用分拆 unsigned int 的方式， =+0 -0= 将计算得到不同的 main position，
这显然不是我们想要的，所以这里统一用 main position 0 来处理。

二是在模除的过程中， =hashmod= 并非使用 node size 进行模除，而是 node size - 1，原因同上。

** set

明确 main position 之后，下一步来了解如何存储 kv。

根据代码中的注释，dict 部分的实现 use a mix of chained scatter table with brent's variation。

#+include: ../lua-5.1.5/src/ltable.c src c -n 8 :lines "8-20"

有兴趣的可以研究论文[fn:1]，这里仅从代码方面解析其实现。


table 模块中提供了 =luaH_set= 实现 kv 存储。

#+caption: ltable.c
#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 494 :lines "494-506"

可以观察到，其中只有 k 参数，而没有 v 参数。
这是因为这个方法只返回参数 k 在 table 中对应 =node.i_val= 的指针，由外部调用者自行进行 v 的赋值。

=luaH_set= 很简单，如果已经存在相应的 k，则直接返回；
通过一系列错误检测之后，调用 =newkey= 方法，添加 k。

#+caption: ltable.c
#+begin_src C -n 392 -r
/*
,** inserts a new key into a hash table; first, check whether key's main 
,** position is free. If not, check whether colliding node is in its main 
,** position or not: if it is not, move colliding node to an empty place and 
,** put new key in its main position; otherwise (colliding node is in its main 
,** position), new key goes to an empty position. 
*/
static TValue *newkey (lua_State *L, Table *t, const TValue *key) {
  Node *mp = mainposition(t, key);
  if (!ttisnil(gval(mp)) || mp == dummynode) {                   (ref:iffree)
    Node *othern;
    Node *n = getfreepos(t);  /* get a free place */
    if (n == NULL) {  /* cannot find a free place? */
      rehash(L, t, key);  /* grow table */
      return luaH_set(L, t, key);  /* re-insert key into grown table */
    }
    lua_assert(n != dummynode);
    othern = mainposition(t, key2tval(mp));
    if (othern != mp) {  /* is colliding node out of its main position? */ (ref:mpne)
      /* yes; move colliding node into free position */
      while (gnext(othern) != mp) othern = gnext(othern);  /* find previous */
      gnext(othern) = n;  /* redo the chain with `n' in place of `mp' */
      *n = *mp;  /* copy colliding node into free pos. (mp->next also goes) */
      gnext(mp) = NULL;  /* now `mp' is free */
      setnilvalue(gval(mp));
    }
    else {  /* colliding node is in its own main position */    (ref:mpeq)
      /* new node will go into free position */
      gnext(n) = gnext(mp);  /* chain new position */
      gnext(mp) = n;
      mp = n;
    }
  }
  gkey(mp)->value = key->value; gkey(mp)->tt = key->tt;         (ref:store)
  luaC_barriert(L, t, key);
  lua_assert(ttisnil(gval(mp)));
  return gval(mp);
}
#+end_src

=newkey= 是理解内部结构的关键。
调用时可能遇到 3 种情况，下面一一讨论。

*** mp free

k 的 main position 是空闲的，即相应的 =node.i_val= 是 nil 值。

#+caption: no collision before
#+begin_src dot :file table-no-collision-before.png
digraph {
	nodes[shape=none,
	      label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="n0" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n1" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n2" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n3" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n4" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n5" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n6" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n7" border="1" bgcolor="white" width="40" height="40"></td>
		</tr>
	      </table>
	      >]

	n[label="",shape=box,width=.5,height=.5,style=filled,fillcolor=lightblue];

	mp[shape=plain];

	n -> mp;
	mp -> nodes:n5:n;
}
#+end_src

#+RESULTS:
[[file:table-no-collision-before.png]]

这种情况下，mp 的位置就是要插入的位置，说明 [[(iffree)][line (iffree)]] 为 false，直接执行 [[(store)][line (store)]] 。

#+caption: no collision after
#+begin_src dot :file table-no-collision-after.png
digraph {
	nodes[shape=none,
	      label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="n0" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n1" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n2" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n3" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n4" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n5" border="1" bgcolor="lightblue" width="40" height="40"></td>
		  <td port="n6" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n7" border="1" bgcolor="white" width="40" height="40"></td>
		</tr>
	      </table>
	      >]

	mp[shape=plain];

	mp -> nodes:n5:n;
}
#+end_src

#+RESULTS:
[[file:table-no-collision-after.png]]

*** colliding node in own mp

如果 k 的 main position（mp）已经被占用，说明出现了冲突，
占用 mp 的结点称为 colliding node。

colliding node 根据 =i_key= 也可以计算出自身的 main position（othern）。

如果 othern 和 mp 是相同的，说明两者确实发生了 hash 冲突，[[(mpeq)][都应该使用这个位置]]。

#+caption: collision with mp equal before
#+begin_src dot :file table-collision-eq-before.png
digraph {
	nodes[shape=none,
	      label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="n0" border="1" bgcolor="pink" width="40" height="40"></td>
		  <td port="n1" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n2" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n3" border="1" bgcolor="pink" width="40" height="40"></td>
		  <td port="n4" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n5" border="1" bgcolor="tomato" width="40" height="40"></td>
		  <td port="n6" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n7" border="1" bgcolor="white" width="40" height="40"></td>
		</tr>
	      </table>
	      >]

	n[label="",shape=box,width=.5,height=.5,style=filled,fillcolor=lightblue];
	mp[shape=plain];
	othern[shape=plain];
	l[label="n",shape=plain];

	n -> mp;
	mp -> nodes:n5;

	othern -> nodes:n5;

	nodes:n5:s -> nodes:n3:s;
	nodes:n3:s -> nodes:n0:s;

	l -> nodes:n7:n;
}
#+end_src

#+RESULTS:
[[file:table-collision-eq-before.png]]

但是位置只有一个，只能从当前空闲的结点借用一个位置（n），
然后使用头插法，用 =i_key.next= 将其链接起来。

可以发现，这个链条的起点从 main position 开始，链接的全部是 main position 相同（即 hash 冲突）的结点。

#+caption: collision with mp equal after
#+begin_src dot :file table-collision-eq-after.png
digraph {
	nodes[shape=none,
	      label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="n0" border="1" bgcolor="pink" width="40" height="40"></td>
		  <td port="n1" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n2" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n3" border="1" bgcolor="pink" width="40" height="40"></td>
		  <td port="n4" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n5" border="1" bgcolor="tomato" width="40" height="40"></td>
		  <td port="n6" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n7" border="1" bgcolor="lightblue" width="40" height="40"></td>
		</tr>
	      </table>
	      >]

	mp[shape=plain];
	othern[shape=plain];
	l[label="n",shape=plain];

	mp -> nodes:n7;
	othern -> nodes:n5;
	l -> nodes:n7:n;

	nodes:n5:s -> nodes:n7;
	nodes:n7:s -> nodes:n3:s;
	nodes:n3:s -> nodes:n0:s;
}
#+end_src

#+RESULTS:
[[file:table-collision-eq-after.png]]

*** colliding node not in own mp

[[(mpne)][如果 othern 和 mp 不相同，]]说明 colliding node 是在之前冲突时，借用了此结点的位置。

之前是空闲的，可以借用，但是现在，明确拥有 mp 的 k 要来拿回属于自己的位置，colliding node 只能让出来。

#+caption: collision with mp not equal before
#+begin_src dot :file table-collision-ne-before.png
digraph {
	nodes[shape=none,
	      label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="n0" border="1" bgcolor="pink" width="40" height="40"></td>
		  <td port="n1" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n2" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n3" border="1" bgcolor="pink" width="40" height="40"></td>
		  <td port="n4" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n5" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n6" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n7" border="1" bgcolor="tomato" width="40" height="40"></td>
		</tr>
	      </table>
	      >]

	n[label="",shape=box,width=.5,height=.5,style=filled,fillcolor=lightblue];
	mp[shape=plain];
	othern[shape=plain];
	l[label="n",shape=plain];

	n -> mp;
	mp -> nodes:n7;
	othern -> nodes:n3;

	nodes:n3:s -> nodes:n0;
	nodes:n0:s -> nodes:n7:s;

	l -> nodes:n6:n;
}
#+end_src

#+RESULTS:
[[file:table-collision-ne-before.png]]

让出的方法很简单，再另外找到一个空闲位置，放置 colliding node，原来的位置就还回去。

为了将新位置链接回去，同时从 othern 一路向下，查找到 colliding node 的上一个结点，并链接新的结点。

#+caption: collision with mp not equal after
#+begin_src dot :file table-collision-ne-after.png
digraph {
	nodes[shape=none,
	      label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="n0" border="1" bgcolor="pink" width="40" height="40"></td>
		  <td port="n1" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n2" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n3" border="1" bgcolor="pink" width="40" height="40"></td>
		  <td port="n4" border="1" bgcolor="white"  width="40" height="40"></td>
		  <td port="n5" border="1" bgcolor="white" width="40" height="40"></td>
		  <td port="n6" border="1" bgcolor="tomato" width="40" height="40"></td>
		  <td port="n7" border="1" bgcolor="lightblue" width="40" height="40"></td>
		</tr>
	      </table>
	      >]

	mp[shape=plain];
	othern[shape=plain];
	l[label="n",shape=plain];

	mp -> nodes:n7;
	othern -> nodes:n0;

	nodes:n3:s -> nodes:n0;
	nodes:n0:s -> nodes:n6:s;

	l -> nodes:n6:n;
}
#+end_src

#+RESULTS:
[[file:table-collision-ne-after.png]]

** get

在 set 小节明确了 node 内部组织的方法之后，get 方法就很容易理解了。

#+caption: ltable.c
#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 466 :lines "466-492"

核心就是先计算得到 main position，再一路通过 next 向下查找，
如果 k 匹配，就返回相应的 v；否则返回 nil。

* array

前面提到，为了效率，table 内部有特定的区域用于存储 array 相关的数据（k 为正整数）。

考虑如下代码，

#+begin_src lua
local t = {1, 2, 3, 4}
#+end_src

如果内部使用 =TValue[]= 来存储，效率自然是最高的。
- 空间上，Node 结构大小至少为 2 * TValue，若直接用数组表示，只需要 1 * TValue 的空间；
- 时间上，若直接使用数组，可以直接索引元素，速度非常快，而 Node 需要在整个链条中使用 next 遍历。

但是，假如出现这种情况，

#+begin_src lua
local t = {1, 2, 3, 4, [1000] = 1000}
#+end_src

索引都为正整数，但是中间并不连续，从 4 到 1000 出现了巨大的空隙。

假如依旧使用 =TValue[]= 来存储就不划算了，大小必须为 1000，中间浪费的空间太多。

综合考虑，lua 使用一种权衡的方式来安排正整数索引的数据。

具体而言，就是找到一个最大的整数 n，其中 0 到 n 之间至少有 n/2 个整数索引，
这样可以保持至少 50% 的利用率。

剩余在 n 范围之外的索引，依旧使用 kv 方式来存储。

#+caption: num in array and dict two part
#+begin_src dot :file table-num-array-dict.png
digraph {
	node[shape=record, width=.1, height=.1];
	
	nd[label="
	   {<i> index | <v> i_val | <k> i_key} |
	   {<i0> 0| <v0> | <k0> } |
	   {<i1> 1| <v1> | <k1> } |
	   {<i2> 2| <v2> true | <k2> false } |
	   {<i3> 3| <v3> | <k3> } |
	   {<i4> 4| <v4> | <k4> } |
	   {<i5> 5| <v5> 1000 | <k5> 1000 } |
	   {<i6> 6| <v6> | <k6> } |
	   {<i7> 7| <v7> \"table\" | <k7> \"section\" }
	   "];

	sz[label="lsizenode = log(8) = 3", shape=none];

	lf[shape=box,label="Node * lastfree"];
	n[shape=box,label="Node * node"];

	n -> nd:i0:nw;
	lf -> nd:i7:n;
	nd:k2:s -> nd:k7:s;

	node[shape=record, width=.1, height=.1];
	
	ar[label="
	   {
		   index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
	   } | {
		   <tv> TValue | 1 | 2 | 3 | 4 |   |   |   |
	   }
	   "];

	a[shape=box,label="TValue * array"];
	asz[label="sizearray = 8", shape = none];

	a -> ar:tv:nw;
}
#+end_src

#+RESULTS:
[[file:table-num-array-dict.png]]

需要注意的细节是，table 表示 array 的时候，默认索引从 1 开始。

相应的，table 中的 TValue *array 只存储正整数索引（>= 1）对应的值。
由于 C 语言数组的索引从 0 开始，所以存储时，有 1 个位置偏移。

** get

在讲解 get 之前，需要明确一点，并且所有数字索引的 kv 都会存储在内部的 array 中。

对于类型是 number 的 k，需要其
- 不是浮点值，是整数值
- 是 ~>= 1~ 的正整数
- 范围在 ~1 - sizearray~ 之间

不在这个范围内的 kv，依旧按照 dict 来处理，从代码中可以明确看到这一点。

#+caption: ltable.c
#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 466 :lines "466-492"

#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 432 :lines "432-450"

** set

set 的逻辑也很简单，不过其中有一点需要注意。

回忆之前 dict 部分的 set 方法，返回的是存储 v 的指针，而如果 kv 安排在 array 部分，
则不需要 newkey 过程，直接返回相应的 array 位置即可。

#+caption: ltable.c
#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 494 :lines "494-518"

先调用 get 方法，得到结果 p， ~if (p != luaO_nilobject)~ 非常关键。

回忆 get 方法，
如果相应 kv 存储在 array 中，直接返回 array 中相应的地址，地址必定不是 =luaO_nilobject= ；
而如果存储在 Node 中，如果找不到相应的 k，才会返回 =luaO_nilobject= 。

这一点细节，和之前的逻辑完美统一起来。

* method

除了 table 内部组织数据的方式，部分方法也值得关注。

** next

在 lua 语言中，我们可以使用 next 方法来遍历 table。
next 接收两个参考，一个是 table，一个是 k。

next 的行为也很容易理解，
- 如果 k 是 nil，则返回 table 的第一项；
- 如果 table 中没有相应的 k，则出错；
- 如果存在相应的 k，则返回存储在 k 之后的 k 和 v；
- 如果 k 是最后一项，则返回 nil nil

#+begin_src lua :results output :exports both
local t = { 1, 2, 3, 4, ["name"] = "t", ["section"] = "table" }
t[3] = nil

local k = nil
local v

repeat
   k, v = next(t, k)
   print(k, v)
until k == nil
#+end_src

#+RESULTS:
: 1	1
: 2	2
: 4	4
: name	t
: section	table
: nil	nil

上面的示例代码，k 以 nil 为开始，不断输入 next，最终遍历整个 table。

#+caption: next figure for example code
#+begin_src dot :file table-next-example.png
digraph {
	node[shape=record, width=.1, height=.1];

	r0[label="
	    { <k> nil } |
	    {          }
	    "];

	n0[label="
	     next( | t | <k> nil | )
	     "];

	r1[label="
	    { <k> 1 } |
	    {     1 }
	    "];

	n1[label="
	     next( | t | <k> 1 | )
	     "];

	r2[label="
	    { <k> 2 } |
	    {     2 }
	    "];

	n2[label="
	     next( | t | <k> 2 | )
	     "];

	r3[label="
	    { <k> 4 } |
	    {     4 }
	    "];

	n3[label="
	     next( | t | <k> 4 | )
	     "];

	r4[label="
	    { <k> \"name\" } |
	    {     \"t\" }
	    "];

	n4[label="
	     next( | t | <k> \"name\" | )
	     "];

	r5[label="
	    { <k> \"section\" } |
	    {     \"table\" }
	    "];

	n5[label="
	     next( | t | <k> \"section\" | )
	     "];

	r6[label="
	    { <k> nil } |
	    {     nil }
	    "];

	r0:k -> n0:k -> r1:k -> n1:k -> r2:k -> n2:k -> r3:k -> n3:k -> r4:k -> n4:k -> r5:k -> n5:k -> r6:k;
}
#+end_src

#+RESULTS:
[[file:table-next-example.png]]

这里要思考的问题是，next 的顺序是如何决定的。
上面的示例代码，无论运行多少次，输出结果都是一样的。说明内部有明显的顺序安排，而不是随机的。

观察代码不难发现，顺序正是依次遍历 array 数组和 node 数组来决定的。

#+caption: next figure in detail
#+begin_src dot :file table-next-detail.png
digraph {
	node[shape=record, width=.1, height=.1];
	
	ar[label="
	   {
		   index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
	   } | {
		   <tv> TValue | 1 ❶ | 2 ❷ |   | 4 ❸ |   |   |   |
	   }
	   ", xlabel="TValue * array"];

	nd[label="
	   {<i> index | <v> i_val | <k> i_key} |
	   {<i0> 0| <v0> | <k0> } |
	   {<i1> 1| <v1> | <k1> } |
	   {<i2> 2| <v2> \"t\" | <k2> \"name\" ❹ } |
	   {<i3> 3| <v3> | <k3> } |
	   {<i4> 4| <v4> | <k4> } |
	   {<i5> 5| <v5> | <k5> } |
	   {<i6> 6| <v6> | <k6> } |
	   {<i7> 7| <v7> \"table\" | <k7> \"section\" ❺ }
	   ", xlabel="Node * node"];
}
#+end_src

#+RESULTS:
[[file:table-next-detail.png]]

语言中使用的 next 是在 api 层面定义的，而底层使用的方法正是 =luaH_next= 。

#+caption: ltable.c
#+INCLUDE: ../lua-5.1.5/src/ltable.c src c -n 132 :lines "132-180"

=luaH_next= 输入的是 k，
- 首先，通过 findindex 找到 k 在 array/node 数组中的索引，
- 然后，将索引 i 自增， Line 164 ~for (i++, ...)~
- 先遍历 array 部分，再遍历 node 部分，跳过所有 v 为 nil 的项
- 直到 array 和 node 遍历结束

值得注意的是， =luaH_next= 返回 0/1 说明是否已经遍历结束，方法内部将 k v 存储在栈上。

关于栈和 api 的具体分析，见之后的章节。

** DRAFT rehash

在 newkey 进行插入的时候，如果发生了空间不足
就会引发 rehash 操作

因为不同于 hash bucket，允许碰撞插入

table 是数组链表的形式，没有空间就没办法了，只能进行扩展。


入口是 rehash 方法
- 先进行 array 部分的统计
  这里的统计很巧妙，使用 log2 数组进行统计，a[i] 表示数组索引在 2^(i-1) - 2^i 的数量
  - 先统计 array part 的数量
  - 再统计 dict part 的数量
  - 不要遗漏最新要添加的值

computesizes，计算新的 array part 的大小，需要一些理解

twotoi/2 < *narray 的条件，是因为如果不符合，则 twotoi 一定不符合
因为其中所有元素小于 size 的一半，一定不符合 array size 的选择

if a == *narray break

是一个优化，如果元素出现的非常密集，在前方
继续统计也没有意义，nums[i] 都是 0，（好像不完全正确？）

累计的应该是 1 2 4 8 之类

相当于，如果 a == *narray，则 a 最大为 twotoi

a 统计的是 < 2^i 的个数 == twotoi

既然已经统计结束，则下一轮，twotoi * 2 必定大于 a 的 2 倍

不符合查找条件

得到大小之后，进行 resize 操作

** DRAFT len

如何确定 table 的长度？

长度是针对 array 的含义而言的

getn，含义针对于数组，因为并没有对 dict 进行搜索，只针对整数索引
- 先取得 sizearray 的大小
  - 如果最后的值是 nil，就要在数组中搜索出一个边界，使用二分法，找到 i j
    i 不是 nil 而 j 是 nil
    i 就是所谓的长度
  - 若数组是满的
    - 没有 dict 部分，直接返回
    - 有 dict 部分，则继续搜索，因为可能有部分整数值，在 dict 部分存储
      - 先 2 倍进行扩张
	- 如果超过最值，bad purpose?
      - 在 i 和 j (2 * i) 中进行 2 分，找到一个边界值




#+begin_src lua :results output
t = {1,2,3,4,5,6}
print(#t)

t[3] = nil
print(#t)

t[6] = nil
print(#t)
#+end_src

#+RESULTS:
: 6
: 6
: 2

=#= 本身的行为，在 array 有空洞的时候，对于不理解底层机制的用户，表现出的行为是“不确定的”

* DRAFT metatable

tagmethod cache

机制不在这里发生作用

* DRAFT weaktable

* practice

table 模块中还有部分方法没有涉及到，如 =rehash, getn= 等，但并非重点内容，
感兴趣的读者可自行阅读。

在明确内部存储结构的基础上，其它方法并不难理解。

| 文件     | 建议                   |
|----------+------------------------|
| ltable.h | 仔细阅读               |
| ltable.c | 浏览阅读，关注核心方法 |

* Footnotes

[fn:1]: https://maths-people.anu.edu.au/~brent/pub/pub013.html

[fn:2]: https://en.wikipedia.org/wiki/Double-precision_floating-point_format

