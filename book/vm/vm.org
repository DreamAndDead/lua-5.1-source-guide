#+setupfile: ../setup.org
#+export_file_name: index

#+hugo_bundle: vm
#+title: vm
#+date: <2021-01-14 四 17:50>

代码生成完成之后，整个文件分析成为一个单独的 Proto，交由 vm 来执行。

和 parser 相比，vm 更容易琢磨，因为它只会从 Proto 中取出字节码，
并按照指令的含义一行一行来执行。

所以各种指令的执行过程不是本章的重点，只需要参考 opcode 相应的注释就不难理解，
本章更关注 vm 内部各个组件的协同过程。

* model

之前在 opcode 章节简单提到了 vm 内部的模型，这里来详细讨论各个部分。

#+begin_src dot :file vm-model.png
digraph {
	code[label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td border="0" bgcolor="white" align="right">3</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white" align="right">2</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white" align="right">pc 1</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white" align="right">0</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
              </table>
	      >, shape=none];

	stack[label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td border="0" bgcolor="white">3</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">2</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">1</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">0</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
              </table>
	      >, shape=none];

	k[label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td border="0" bgcolor="white">3</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">2</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">1</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">0</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
              </table>
	      >, shape=none];

	gbl[label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td border="1" bgcolor="white">                 </td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="1" bgcolor="white">        </td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="1" bgcolor="white">        </td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="1" bgcolor="white">        </td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
              </table>
	      >, shape=none];

	upval[label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td border="0" bgcolor="white">3</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">2</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">1</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
	        <tr>
		  <td border="0" bgcolor="white">0</td>
		  <td border="1" bgcolor="white">                 </td>
		</tr>
              </table>
	      >, shape=none];

	subgraph cluster_0 {
		code;
		label="Code";
	}
	subgraph cluster_1 {
		stack;
		label="Stack";
	}
	subgraph cluster_2 {
		k;
		label="Kst";
	}
	subgraph cluster_3 {
		gbl;
		label="Gbl";
	}
	subgraph cluster_4 {
		upval;
		label="UpValue";
	}

	
}
#+end_src

#+RESULTS:
[[file:vm-model.png]]

** code

vm 所执行的代码来自 parser，即存储在 Proto 中。

#+caption: lobject.h
#+include: ../../lua-5.1.5/src/lobject.h src C -n 228 :lines "228-238"

#+caption: llimits.h
#+include: ../../lua-5.1.5/src/llimits.h src C -n 84 :lines "84-89"

Proto.code 是指令数组，索引从 0 开始，存储了所有生成的指令。

vm 在执行的时候，内部存在一个 pc 指针，指向当前要执行指令。

这个 pc 和代码生成阶段的 pc 是完全不同的，代码生成阶段的 pc 用来标识生成指令的下一个索引，
而 vm 在运行阶段的 pc 是一个指针。

#+caption: lvm.c
#+include: ../../lua-5.1.5/src/lvm.c src C -n 377 :lines "377-382"

** kst

k 表在分析阶段，收集了所有常量，并提供索引供指令使用。

所以在执行指令的时候，需要 k 表的配合来引用常量，vm 中直接用 =TValue *k= 引用 Proto 中的 k 表。

#+caption: lvm.c
#+include: ../../lua-5.1.5/src/lvm.c src C -n 377 :lines "377-388"
   
** stack

在代码生成阶段，parser 只能操作一个“想象”中的栈，而在 vm 中则是具体实现了它。

stack 的本质是一个 TValue 数组，通过 StkId 引用栈中元素。

#+caption: lobject.h
#+include: ../../lua-5.1.5/src/lobject.h src C -n 193 :lines "193-194"

栈及栈的相应状态，存储在 =lua_State= 中，同 FuncState LexState 一样，
=lua_State= 也是用于记录状态的结构，具体的说，就是用来记录线程运行时的状态。

#+caption: lstate.h
#+include: ../../lua-5.1.5/src/lstate.h src C -n 97 :lines "97-128"

其中
- =lu_byte status= ，线程状态
- =StkId top= ，函数调用时的栈顶指针
- =StkId base= ，函数调用时的栈基指针
- =global_State *l_G= ，指向 global state
- =CallInfo *ci= ，当前 CallInfo
- =const Instruction *savedpc= ，暂存指令位置
- =StkId stack_last= ，栈空间的最后
- =StkId stack= ，栈指针
- =CallInfo *end_ci= ，CallInfo 数组的最后
- =CallInfo *base_ci= ，CallInfo 数组的开始
- =int statcksize= ，栈空间大小
- =int size_ci= ，CallInfo 数组的大小
- =TValue l_gt= ，Gbl 表
- =TValue env= ，临时存储环境

至于 CallInfo，在后续函数调用章节再讲解。

** gbl

Gbl 表用于记录 lua 线程的全局变量，存储在 =lua_State.l_gt= 中，
是一个 table 结构。

setglobal/getglobal 指令就作用于这里。

** upvalue

upvalue 是一个数组，元素为 =UpVal *= ，存在于每一个 closure 中。

#+caption: lobject.h
#+include: ../../lua-5.1.5/src/lobject.h src C -n 302 :lines "302-307"

#+caption: lobject.h
#+include: ../../lua-5.1.5/src/lobject.h src C -n 270 :lines "270-285"

对于每一个 Proto，在执行前都会封装为 closure，

#+caption: lvm.c
#+include: ../../lua-5.1.5/src/lvm.c src C -n 723 :lines "723-742"

其中调用 =luaF_newLclosure= 来执行，其中为 upvalue 数组开辟了空间，
数组元素是 =UpVal *= 指针类型，具体指向在运行时确定。

#+caption: lfunc.c
#+include: ../../lua-5.1.5/src/lfunc.c src C -n 33 :lines "33-42"

前面提到，整个文件作为一个匿名函数来分析，最终得到 Proto 交由 vm 执行，
同样的原则，这个 Proto 在执行之前，需要封装为 closure，

#+caption: ldo.c
#+include: ../../lua-5.1.5/src/ldo.c src C -n 491 :lines "491-507"

* the loop

vm 执行 closure 的入口为 =luaV_execute= ，

#+caption: lvm.c
#+include: ../../lua-5.1.5/src/lvm.c src C -n 377 :lines "377-414"

- line 389，内部是一个死循环
- line 390，默认自增 pc，从中取出指令
- line 406，根据指令的类型，执行对应的操作

大部分指令的操作都非常简单，对应 opcode 的语义注释就可以理解。

下面只针对重要的部分，vm 是如何运行 closure 的。

* closure

在编译时，并没有涉及到 closure 结构，作为 8 种基础类型之一，closure 结构在运行时发挥作用。

#+caption: lobject.h
#+include: ../../lua-5.1.5/src/lobject.h src C -n 287 :lines "287-317"

Closure 是 union 类型，容纳 C Closure 和 Lua Closure 两种类型，C Closure 之后再讲解，
这里只看 Lua Closure。

- =lu_byte isC= ，标识 Closure 是 C 还是 Lua
- =lu_byte nupvalues= ，拥有 upvalue 的数量
- =struct Table *env= ，函数运行环境，等同于 gbl 表
- =struct Proto *p= ，指向 parser 生成的 Proto
- =Upval *upvals[1]= ，为 upvalue 分配的空间

** def

回忆 parser 中 function 的定义过程，解析 function 定义的过程是递归，
生成相应的 Proto 并链接到上层 Proto.p 中。

所以在 vm 中和 function 定义相关的功能，只有使用 closure 指令进行封装这一步。

#+caption: lvm.c
#+include: ../../lua-5.1.5/src/lvm.c src C -n 723 :lines "723-743"

line 729 为 closure 结构分配空间。

line 731 - 738 是比较有意思的地方，还记得指令生成时，对 upvalue 的约定吗？

VLOCAL 使用 move 指令，VUPVAL 使用 getupval 指令，这里根据 upvalue 的数量，
向下读取相应数量的指令，初始化 upvalue。

详细到下面的 upval 小节解析。

line 739 将封装生成的 closure 赋值给变量。

** call

介绍函数调用之前，先来了解一下 CallInfo 结构。

整个线程的栈记录着计算的状态，函数调用具有天生的栈特性，
调用前入栈，调用后出栈。

CallInfo 就是用来记录函数调用对应栈的位置的。

#+caption: lstate.h
#+include: ../../lua-5.1.5/src/lstate.h src C -n 45 :lines "45-56"

- func，指向调用的函数本身
- base，指向调用函数对应的栈基地址
- top，指向调用函数对应的栈顶地址

=lua_State= 中，存在着一个 CallInfo 数组，索引从 0 开始，记录着函数调用的层次。

=base_ci= 指向索引 0， =end_ci= 指向最后， =ci= 指向当前的函数调用层次。
每当遇到新的函数调用，ci 自增；调用结束，ci 自减。

具体来看一个示例，

#+begin_src lua
local function f()
end

f(1, 2, 3)
#+end_src

#+begin_example
; function [0] definition (level 1)
; 0 upvalues, 0 params, 2 is_vararg, 5 stacks
.function  0 0 2 5
.local  "f"  ; 0
.const  1  ; 0
.const  2  ; 1
.const  3  ; 2

  ; function [0] definition (level 2)
  ; 0 upvalues, 0 params, 0 is_vararg, 2 stacks
  .function  0 0 0 2
  [1] return     0   1      
  ; end of function

[1] closure    0   0        ; 0 upvalues
[2] move       1   0      
[3] loadk      2   0        ; 1
[4] loadk      3   1        ; 2
[5] loadk      4   2        ; 3
[6] call       1   4   1  
[7] return     0   1      
; end of function
#+end_example

定义一个函数 f，并以参数 1 2 3 来调用它。

在调用 call 指令之前，整体的栈状态如下，

#+begin_src dot :file vm-stack-call.png
digraph {
	rankdir = LR;
	
	s[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr><td port="last">14</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>13</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>12</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>11</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="top">10</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>9</td><td align="middle" border="1" bgcolor="white">3</td></tr>
	        <tr><td>8</td><td align="middle" border="1" bgcolor="white">2</td></tr>
	        <tr><td>7</td><td align="middle" border="1" bgcolor="white">1</td></tr>
	        <tr><td>6</td><td align="middle" border="1" bgcolor="white">function f</td></tr>
	        <tr><td port="base">5</td><td align="middle" border="1" bgcolor="white">function f</td></tr>
	        <tr><td port="func">4</td><td align="middle" border="1" bgcolor="white">function chunk</td></tr>
	        <tr><td>3</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>2</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>1</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="stack">0</td><td align="middle" border="1" bgcolor="white"></td></tr>
	      </table>
	      >];

	ci[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr><td port="end">4</td><td port="ci4top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci4base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci4func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td>3</td><td port="ci3top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci3base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci3func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td port="cur">2</td><td port="ci2top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci2base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci2func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td>1</td><td port="ci1top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci1base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci1func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td port="base">0</td><td port="ci0top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci0base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci0func" align="middle" border="1" bgcolor="white">func</td></tr>
	      </table>
	      >];


	node[shape=plain];

	stack[label="L->stack"];
	last[label="L->stack_last"];

	lbase[label="L->base"];
	ltop[label="L->top"];

	curci[label="L->ci"];
	baseci[label="L->base_ci"];
	endci[label="L->end_ci"];
	
	stack -> s:stack;
	last -> s:last;

	lbase -> s:base;
	ltop -> s:top;

	ci:ci2func -> s:func;
	ci:ci2base -> lbase;
	ci:ci2top -> ltop;

	curci -> ci:cur;
	baseci -> ci:base;
	endci -> ci:end;
}
#+end_src

#+RESULTS:
[[file:vm-stack-call.png]]

被调用的函数，先入栈，其后再压入传入的参数，在调用时，新增 CallInfo 结构，
ci->func 指向被调用的函数，ci->base 指向第一个参数，ci->top 指向取决于被调用的函数分配的空间大小。

上图指的是 vm 调用函数 chunk 对应的栈状态。

L->base L->top 永远指向当前正在被调用的函数的栈区域，代码生成过程中“想象”中的栈，就是由
L->base L->top 指定的区域。

调用 call 指令之后，栈状态如下，

#+begin_src dot :file vm-stack-call-1.png
digraph {
	rankdir = LR;
	
	s[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr><td port="last">14</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>13</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>12</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>11</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="10">10</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="9">9</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>8</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="7">7</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="6">6</td><td align="middle" border="1" bgcolor="white">function f</td></tr>
	        <tr><td port="5">5</td><td align="middle" border="1" bgcolor="white">function f</td></tr>
	        <tr><td port="4">4</td><td align="middle" border="1" bgcolor="white">function chunk</td></tr>
	        <tr><td>3</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>2</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>1</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="stack">0</td><td align="middle" border="1" bgcolor="white"></td></tr>
	      </table>
	      >];

	ci[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr><td port="end">4</td><td port="ci4top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci4base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci4func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td port="cur">3</td><td port="ci3top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci3base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci3func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td>2</td><td port="ci2top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci2base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci2func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td>1</td><td port="ci1top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci1base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci1func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td port="base">0</td><td port="ci0top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci0base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci0func" align="middle" border="1" bgcolor="white">func</td></tr>
	      </table>
	      >];

	node[shape=plain];

	stack[label="L->stack"];
	last[label="L->stack_last"];

	lbase[label="L->base"];
	ltop[label="L->top"];

	curci[label="L->ci"];
	baseci[label="L->base_ci"];
	endci[label="L->end_ci"];
	
	stack -> s:stack;
	last -> s:last;

	ci:ci2func -> s:4;
	ci:ci2base -> s:5;
	ci:ci2top -> s:10;

	ci:ci3func -> s:6;
	ci:ci3base -> lbase -> s:7;
	ci:ci3top -> ltop -> s:9;

	curci -> ci:cur;
	baseci -> ci:base;
	endci -> ci:end;
}
#+end_src

#+RESULTS:
[[file:vm-stack-call-1.png]]

新增 ci，用于管理 chunk 调用函数 f 对应的状态，原则和上面相同。

相应代码具体描述了对应的过程，

#+caption: lvm.c
#+include: ../../lua-5.1.5/src/lvm.c src C -n 586 :lines "586-607"

#+caption: ldo.c
#+include: ../../lua-5.1.5/src/ldo.c src C -n 265 :lines "265-307"

** return

return 的过程和 call 相反，收集相应的返回值，并将值从 ci->func 开始覆盖，
销毁当前 ci，返回到上层 ci。

上层 ci 从调用函数的位置收集相应的返回值。

#+begin_src dot :file vm-stack-call-2.png
digraph {
	rankdir = LR;
	
	s[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr><td port="last">14</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>13</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>12</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>11</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="top">10</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>9</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>8</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>7</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>6</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="base">5</td><td align="middle" border="1" bgcolor="white">function f</td></tr>
	        <tr><td port="func">4</td><td align="middle" border="1" bgcolor="white">function chunk</td></tr>
	        <tr><td>3</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>2</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>1</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="stack">0</td><td align="middle" border="1" bgcolor="white"></td></tr>
	      </table>
	      >];

	ci[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr><td port="end">4</td><td port="ci4top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci4base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci4func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td>3</td><td port="ci3top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci3base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci3func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td port="cur">2</td><td port="ci2top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci2base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci2func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td>1</td><td port="ci1top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci1base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci1func" align="middle" border="1" bgcolor="white">func</td></tr>
	        <tr><td port="base">0</td><td port="ci0top" align="middle" border="1" bgcolor="white">top</td></tr>
	        <tr><td></td><td port="ci0base" align="middle" border="1" bgcolor="white">base</td></tr>
	        <tr><td></td><td port="ci0func" align="middle" border="1" bgcolor="white">func</td></tr>
	      </table>
	      >];


	node[shape=plain];

	stack[label="L->stack"];
	last[label="L->stack_last"];

	lbase[label="L->base"];
	ltop[label="L->top"];

	curci[label="L->ci"];
	baseci[label="L->base_ci"];
	endci[label="L->end_ci"];
	
	stack -> s:stack;
	last -> s:last;

	lbase -> s:base;
	ltop -> s:top;

	ci:ci2func -> s:func;
	ci:ci2base -> lbase;
	ci:ci2top -> ltop;

	curci -> ci:cur;
	baseci -> ci:base;
	endci -> ci:end;
}
#+end_src

#+RESULTS:
[[file:vm-stack-call-2.png]]

还是上面的示例，调用 f 返回之后，没有返回值。

ci 回退到上层，不收集返回值。

相应实现的代码如下，

#+caption: lvm.c
#+include: ../../lua-5.1.5/src/lvm.c src C -n 639 :lines "639-654"

#+caption: ldo.c
#+include: ../../lua-5.1.5/src/ldo.c src C -n 343 :lines "343-362"

** TODO tailcall
    
** upval

之前已经零碎的提到 upvalue 的几个方面，
本节来详细讨论 vm 中是如何实现 upvalue 的。

先来看一段示例，

#+begin_src lua
local a

local function f()
   local b

   local function g()
      b = 20
      a = 10
   end

   g()

   return g
end

local h = f()

h()
#+end_src

a 和 b 都是函数 g 的 upval。

当函数 g 在 f 内部第一次调用时，修改了 a 和 b 值，此时 a 和 b 在栈上都是存活的，
因为 a 是 chunk 的局部变量，b 是 f 的局部变量。

当调用 f，将 g 赋值与 h 时，此时调用 h，a 依然是存活的，但是由于离开了 f，b 在栈上已经被回收。

此时 g 如何访问到 upvalue b 呢？

lua 用一种灵巧的方法来解决这个问题。

#+caption: lobject.h
#+include: ../../lua-5.1.5/src/lobject.h src C -n 270 :lines "270-285"

从注释中可以看到，upval 有两种状态，open 和 closed。

其中 v 指向 upval 所引用的值，当状态为 closed 时，指向自身的 u.value；
当状态为 open 时，指向栈中元素。


比如上面的示例代码，当在函数 f 中调用 g 时，a 和 b 在栈上都是存活的，
相应的 upval 处于 open 状态，分别指向栈中对应的地址。

#+begin_src dot :file vm-upval-open.png
digraph {
	s[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr><td port="top">10</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>9</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>8</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>7</td><td port="b" align="middle" border="1" bgcolor="white">b</td></tr>
	        <tr><td>6</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="base">5</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>4</td><td port="a" align="middle" border="1" bgcolor="white">a</td></tr>
	        <tr><td>3</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>2</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>1</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="stack">0</td><td align="middle" border="1" bgcolor="white">             </td></tr>
	      </table>
	      >];
	
	u1[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="v" align="middle" border="1" bgcolor="white">v</td>
		  <td port="u" align="middle" border="1" bgcolor="white">u.value</td>
		  <td port="n" align="middle" border="1" bgcolor="white">next</td>
		</tr>
	      </table>
	      >];
	
	u2[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="v" align="middle" border="1" bgcolor="white">v</td>
		  <td port="u" align="middle" border="1" bgcolor="white">u.value</td>
		  <td port="n" align="middle" border="1" bgcolor="white">next</td>
		</tr>
	      </table>
	      >];

	g[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="0" align="middle" border="1" bgcolor="white">   </td>
		  <td align="middle" border="0" bgcolor="white">0</td>
		</tr>
	        <tr>
		  <td port="1" align="middle" border="1" bgcolor="white">   </td>
		  <td align="middle" border="0" bgcolor="white">1</td>
		</tr>
	      </table>
	      >];

	f[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="0" align="middle" border="1" bgcolor="white">   </td>
		  <td align="middle" border="0" bgcolor="white">0</td>
		</tr>
	      </table>
	      >];

	rankdir = LR;

	{rank=same; u1; u2; o;}
	{rank=same; g; c; f; fc;}

	s:b -> u1:v[dir=back];
	s:a -> u2:v[dir=back];

	u1:n -> u2:n;
	
	o[label="L->openupval", shape=plain];

	o -> u1:n;

	c[label="l->upvals(closure g)", shape=plain];

	c -> g;

	u1:n -> g:0[dir=back];
	u2:n -> g:1[dir=back];

	fc[label="l->upvals(closure f)", shape=plain];

	fc -> f;

	u2:n -> f:0[dir=back];
	
}
#+end_src

#+RESULTS:
[[file:vm-upval-open.png]]

当离开函数 f 调用 h 时，已经离开了函数 f 的作用域，b 不再于栈上存活，
于是进行 close 操作，将 b 的值拷贝到 u.value，并修改 v 的指向。

这里的操作对于 l->upvals 是完全透明的，因为其只通过 v 来访问 upval 的值。

#+begin_src dot :file vm-upval-close.png
digraph {
	s[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr><td port="top">10</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>9</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>8</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>7</td><td port="b" align="middle" border="1" bgcolor="white">b</td></tr>
	        <tr><td>6</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="base">5</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>4</td><td port="a" align="middle" border="1" bgcolor="white">a</td></tr>
	        <tr><td>3</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>2</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td>1</td><td align="middle" border="1" bgcolor="white"></td></tr>
	        <tr><td port="stack">0</td><td align="middle" border="1" bgcolor="white">             </td></tr>
	      </table>
	      >];
	
	u1[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="v" align="middle" border="1" bgcolor="white">v</td>
		  <td port="u" align="middle" border="1" bgcolor="white">u.value</td>
		  <td port="n" align="middle" border="1" bgcolor="white">next</td>
		</tr>
	      </table>
	      >];
	
	u2[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="v" align="middle" border="1" bgcolor="white">v</td>
		  <td port="u" align="middle" border="1" bgcolor="white">u.value</td>
		  <td port="n" align="middle" border="1" bgcolor="white">next</td>
		</tr>
	      </table>
	      >];


	g[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="0" align="middle" border="1" bgcolor="white">   </td>
		  <td align="middle" border="0" bgcolor="white">0</td>
		</tr>
	        <tr>
		  <td port="1" align="middle" border="1" bgcolor="white">   </td>
		  <td align="middle" border="0" bgcolor="white">1</td>
		</tr>
	      </table>
	      >];

	f[shape=none, label=<
	      <table border="0" cellspacing="0">
	        <tr>
		  <td port="0" align="middle" border="1" bgcolor="white">   </td>
		  <td align="middle" border="0" bgcolor="white">0</td>
		</tr>
	      </table>
	      >];

	rankdir = LR;

	{rank=same; u1; u2; o;}
	{rank=same; g; c; f; fc;}

	c[label="l->upvals(closure g)", shape=plain];

	c -> g;

	u1:n -> g:0[dir=back];
	u2:n -> g:1[dir=back];


	u1:v -> u1:u:s;

	s:a -> u2:v[dir=back];

	o[label="L->openupval", shape=plain];

	o -> u2:n;

	fc[label="l->upvals(closure f)", shape=plain];

	fc -> f;

	u2:n -> f:0[dir=back];
}
#+end_src

#+RESULTS:
[[file:vm-upval-close.png]]


#+caption: lvm.c
#+include: ../../lua-5.1.5/src/lvm.c src C -n 723 :lines "723-743"

#+caption: lfunc.c
#+include: ../../lua-5.1.5/src/lfunc.c src C -n 53 :lines "53-80"

其中 closure 之后的 move 指令，意味着 upval 处于 open 状态，upvale 需要去链接到栈。
而 getupval 指令，就直接引用上层 closure 相应的 upval 指向的地址就好。

L->openupval 是一个单向链表，其中链接着所有 open 状态的 upval，按栈的高地址到低地址的顺序排列。

注意 line 71 72，pp 是 &p->next，当 ~*pp = obj2gco(uv)~  的时候，修改了 next 指针的值，
得以将新的 upval 插入到链表中。

至于 close 操作也不难理解， =luaF_close= 将所有高于 level 栈地址的 open upval 全部变成 close 状态，
即修改 v 指针指向自身，并从 L->openupval 中脱离。

#+caption: lfunc.c
#+include: ../../lua-5.1.5/src/lfunc.c src C -n 96 :lines "96-113"

** TODO metatable

** TODO c closure

* practice

上面只提到了和 closure 相关的字节码逻辑，读者可以自行输入其它 lua 代码示例，
探索其它字节码的实现。
  
| 文件    | 建议     |
|---------+----------|
| lvm.h   | 仔细阅读 |
| lvm.h   | 仔细阅读 |
| lfunc.h | 仔细阅读 |
| lfunc.c | 仔细阅读 |

