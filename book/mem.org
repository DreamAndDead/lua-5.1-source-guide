#+SETUPFILE: setup.org

#+TITLE: memory
#+DATE: <2020-12-23 三 11:59>


内存管理对所有程序都很关键，对于动态语言更是如此。

lua 是单线程程序，即使在内部实现了协程，但内存还是统一管理的。

内存回收使用 gc 算法，是非常重要的模块，而相对地，内存分配就显得非常简单。

本章就讲解 lua 源码中关于内存分配的内容。

* core api

内存分配，无外乎涉及 3 个基础 api
- malloc
- realloc
- free

对于了解操作系统和 C 语言的大家都不陌生。

lua 内部将其简化为 1 个 api，定义原型为 =lua_Alloc=

#+CAPTION: lua.h
#+INCLUDE: ../lua-5.1.5/src/lua.h src c -n 63 :lines "63-67"

这是一个函数指针，规定其行为需遵从如下约定

#+CAPTION: lmem.c
#+INCLUDE: ../lua-5.1.5/src/lmem.c src c -n 23 :lines "23-40"

简单的说，就是根据参数的不同，将 3 个基础 api 的功能用 1 个 api 来表示
- malloc， ~frealloc(ud, NULL, 0, ns)~ ，分配大小为 ns 的内存，返回头地址
- realloc， ~frealloc(ud, p, os, ns)~ ，变更 p 开始的内存块大小从 os 到 ns，失败返回 NULL
- free， ~frealloc(ud, p, os, 0)~ ，回收以 p 开始的 os 大小的内存块，返回 NULL

lua 默认提供一个符合约定的 frealloc 函数供内部使用，可以看到它是非常纯粹的

#+caption: lauxlib.c
#+INCLUDE: ../lua-5.1.5/src/lauxlib.c src c -n 627 :lines "627-637"

** about global state

在 [[file:overview.org][overview]] 章节，简单提到了 =global_State= ，字面意义上理解，它和全局的状态相关。

这里就是它的一个应用方面，记录内存分配相关的状态。

#+caption: lstate.h
#+begin_src C -n 65 -r
/*
,** `global state', shared by all threads of this state
*/
typedef struct global_State {
  stringtable strt;  /* hash table for strings */
  lua_Alloc frealloc;  /* function to reallocate memory */  (ref:fa)
  void *ud;         /* auxiliary data to `frealloc' */      (ref:ud) 
  lu_byte currentwhite;
  lu_byte gcstate;  /* state of garbage collector */
  int sweepstrgc;  /* position of sweep in `strt' */
  GCObject *rootgc;  /* list of all collectable objects */
  GCObject **sweepgc;  /* position of sweep in `rootgc' */
  GCObject *gray;  /* list of gray objects */
  GCObject *grayagain;  /* list of objects to be traversed atomically */
  GCObject *weak;  /* list of weak tables (to be cleared) */
  GCObject *tmudata;  /* last element of list of userdata to be GC */
  Mbuffer buff;  /* temporary buffer for string concatentation */
  lu_mem GCthreshold;
  lu_mem totalbytes;  /* number of bytes currently allocated */  (ref:tb)
  lu_mem estimate;  /* an estimate of number of bytes actually in use */
  lu_mem gcdept;  /* how much GC is `behind schedule' */
  int gcpause;  /* size of pause between successive GCs */
  int gcstepmul;  /* GC `granularity' */
  lua_CFunction panic;  /* to be called in unprotected errors */
  TValue l_registry;
  struct lua_State *mainthread;
  UpVal uvhead;  /* head of double-linked list of all open upvalues */
  struct Table *mt[NUM_TAGS];  /* metatables for basic types */
  TString *tmname[TM_N];  /* array with tag-method names */
} global_State;
#+end_src

- [[(fa)][frealloc]] 引用内部的内存分配函数，即上面提到的 =l_alloc=
- [[(ud)][ud]] 引用 frealloc 函数的第一个参数，提供辅助数据，用于用户自定义
- [[(tb)][totalbytes]] 记录已分配的总内存大小

在了解 =global_State= 相关字段后，就不难理解 lua 在 c api 层面提供的相关接口，
使用户自定义内存管理函数。

#+caption: lapi.c
#+INCLUDE: ../lua-5.1.5/src/lapi.c src c -n 1007 :lines "1007-1023"

* generic api

核心 api 定义之后，其它上层方法不过是对它的封装。

#+begin_src dot :file mem-call.png
digraph {
	rankdir = TD;
	node[shape=box];

	g[label="g->frealloc"];
	luaM_realloc_[style=filled, color=skyblue];
	luaM_reallocv[style=filled, color=skyblue];
	luaM_growaux_[style=filled, color=skyblue];
	
	luaM_reallocv -> luaM_realloc_;

	luaM_freemem -> luaM_realloc_;
	luaM_free -> luaM_realloc_;
	luaM_freearray -> luaM_reallocv;

	luaM_malloc -> luaM_realloc_;
	luaM_new -> luaM_malloc;
	luaM_newvector -> luaM_reallocv;

	luaM_growvector -> luaM_growaux_;
	luaM_reallocvector -> luaM_reallocv;

	luaM_realloc_ -> g;
	luaM_growaux_ -> luaM_reallocv;
}
#+end_src

#+RESULTS:
[[file:mem-call.png]]

lmem.h 对外提供了诸多函数和宏，依赖关系如图示，这里简要介绍图中标识的 3 个方法，其余留给读者自行阅读。

** =luaM_realloc_=

对核心 api 进行了封装，检测函数错误，以及计算 totalbytes，为其它方法提供了基础。

#+caption: lmem.c
#+INCLUDE: ../lua-5.1.5/src/lmem.c src c -n 73 :lines "73-86"

** =luaM_rellocv=

这个方法是一个宏，其中参数含义为
- L -> =lua_State=
- b -> block pointer
- on -> old number n
- n -> new number n
- e -> elem size

#+caption: lmem.h
#+INCLUDE: ../lua-5.1.5/src/lmem.h src c -n 19 :lines "19-23"

可以看出，这个宏在 =luaM_realloc_= 的基础上，方便对多元素数组进行内存分配，省去重复手动计算内存大小的困扰。

其中有一个细节，使用 =n+1= 和 =MAX_SIZET/e= 进行比较，而非使用 =(n+1) * e= 和 =MAX_SIZET= 进行比较，
因为 =size_t= 是无符号类型，先进行除法来避免比较时溢出。

** =luaM_growaux_=

这个方法在 =luaM_rellocv= 的基础上，添加了 limit 的限制。

最小不能小于 4， 最大不能超过 limit，按 2 倍速度进行内存 grow，适用于管理 *类 vector 结构* 。

#+caption: lmem.c
#+INCLUDE: ../lua-5.1.5/src/lmem.c src c -n 46 :lines "46-64"

* practice

本章并不复杂，明确了上面的基础，剩下的方法并不难理解。

| 文件   | 建议     |
|--------+----------|
| lmem.h | 仔细阅读 |
| lmem.c | 仔细阅读 |

