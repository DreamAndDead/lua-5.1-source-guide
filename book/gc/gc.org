#+setupfile: ../setup.org
#+export_file_name: index

#+hugo_bundle: gc
#+TITLE: gc
#+DATE: <2021-01-19 二 15:16>

本章来讲解 Lua 内部实现的 gc 机制。

* algo

gc 算法有很多种，Lua 采用一种增量式三色标记清除算法来实现 gc 机制。

之所以说一种，是因为采用的 gc 算法与其说是一个算法，不如说是一类算法，
大体的思想是相同的，不过在实现细节有些许不同。

** mark & sweep

双色标记清除算法是最经典的算法。

初始阶段，所有对象标记为白色；

#+begin_src dot :file gc-2-color-root.png
digraph {
	node[shape=none];

	o[label=<
	  <table border="0">
	  <tr>
	  <td port="0" border="1" bgcolor="white"><font color="black">  A  </font></td>
	  <td port="1" border="1" bgcolor="white"><font color="black">  B  </font></td>
	  <td port="2" border="1" bgcolor="white"><font color="black">  C  </font></td>
	  <td port="3" border="1" bgcolor="white"><font color="black">  D  </font></td>
	  <td port="4" border="1" bgcolor="white"><font color="black">  E  </font></td>
	  <td port="5" border="1" bgcolor="white"><font color="black">  F  </font></td>
	  <td port="6" border="1" bgcolor="white"><font color="black">  G  </font></td>
	  <td port="7" border="1" bgcolor="white"><font color="black">  H  </font></td>
	  </tr>
	  </table>
	  >];

	o:4 -> o:1 -> o:2 -> o:6;

	o:4 -> root[dir=back];
}
#+end_src

#+RESULTS:
[[file:gc-2-color-root.png]]

标记阶段，将所有从 root 可达的对象标记为黑色；

#+begin_src dot :file gc-2-color-root-1.png
digraph {
	node[shape=none];

	o[label=<
	  <table border="0">
	  <tr>
	  <td port="0" border="1" bgcolor="white"><font color="black">  A  </font></td>
	  <td port="1" border="1" bgcolor="black"><font color="white">  B  </font></td>
	  <td port="2" border="1" bgcolor="black"><font color="white">  C  </font></td>
	  <td port="3" border="1" bgcolor="white"><font color="black">  D  </font></td>
	  <td port="4" border="1" bgcolor="black"><font color="white">  E  </font></td>
	  <td port="5" border="1" bgcolor="white"><font color="black">  F  </font></td>
	  <td port="6" border="1" bgcolor="black"><font color="white">  G  </font></td>
	  <td port="7" border="1" bgcolor="white"><font color="black">  H  </font></td>
	  </tr>
	  </table>
	  >];

	o:4 -> o:1 -> o:2 -> o:6;

	o:4 -> root[dir=back];
}
#+end_src

#+RESULTS:
[[file:gc-2-color-root-1.png]]

回收阶段，将所有白色对象回收，同时将所有黑色对象重新标记回白色；

#+begin_src dot :file gc-2-color-root-2.png
digraph {
	node[shape=none];

	o[label=<
	  <table border="0">
	  <tr>
	  <td port="0" border="0" bgcolor="white"><font color="black">     </font></td>
	  <td port="1" border="1" bgcolor="white"><font color="black">  B  </font></td>
	  <td port="2" border="1" bgcolor="white"><font color="black">  C  </font></td>
	  <td port="3" border="0" bgcolor="white"><font color="black">     </font></td>
	  <td port="4" border="1" bgcolor="white"><font color="black">  E  </font></td>
	  <td port="5" border="0" bgcolor="white"><font color="black">     </font></td>
	  <td port="6" border="1" bgcolor="white"><font color="black">  G  </font></td>
	  <td port="7" border="0" bgcolor="white"><font color="black">     </font></td>
	  </tr>
	  </table>
	  >];

	o:4 -> o:1 -> o:2 -> o:6;

	o:4 -> root[dir=back];
}
#+end_src

#+RESULTS:
[[file:gc-2-color-root-2.png]]

gc 的过程，就在这些阶段中循环进行，所有对象在两种颜色间完成标记和清理。

#+begin_src dot :file gc-2-color.png
digraph {
	node[shape="circle"];
	w[label="white"];
	b[label="black", fontcolor="white", style=filled, color="black"];

	w:w -> b:w[label="mark"];
	b:e -> w:e[label="sweep"];

	nodesep = 1;
}
#+end_src

#+RESULTS:
[[file:gc-2-color.png]]

不过在传统的标记清除算法中，gc 过程是一个整体，主程序在这期间需要暂停。
如果需要处理的对象过多，则主程序需要暂停过长时间。

#+begin_src ditaa :file gc-not-inc.png

+----------------+                                                  +---------------+
|     main       +-+                                             +->|     main      |
+----------------+ |                                             |  +---------------+
                   |                                             |
                   |  +----------------------------------------+ |
                   +->|                   gc                   +-+
                      +----------------------------------------+

#+end_src

#+RESULTS:
[[file:gc-not-inc.png]]

** tri color incremental mark & sweep

三色标记清除算法是对上述算法的改进。

引入了第三种颜色灰色，使 gc 过程可以增量式的运行，
即 gc 过程可以分成短时间的小段穿插在主程序间执行。

#+begin_src ditaa :file gc-inc.png

+----------+              +----------+              +----------+              +----------+
|   main   +-+         +->|   main   +-+         +->|   main   +-+         +->|   main   |
+----------+ |         |  +----------+ |         |  +----------+ |         |  +----------+
             |         |               |         |               |         |
             |  +----+ |               |  +----+ |               |  +----+ |
             +->| gc +-+               +->| gc +-+               +->| gc +-+
                +----+                    +----+                    +----+

#+end_src

#+RESULTS:
[[file:gc-inc.png]]

改进后的 gc 过程如下：

初始阶段，所有对象标识为白色；

标记阶段的开始，将所有从 root 可达的对象标记为灰色；

标记阶段，逐个取出灰色对象，将其所有可达的白色对象标记为灰色，最后将自身标记为黑色；

清除阶段，当不存在灰色对象时，开始清除白色对象，将所有黑色对象标记回白色。

改进后的算法，标记阶段可以增量式的运行，随时暂停和继续。

#+begin_src dot :file gc-3-color.png
digraph {
	node[shape="circle"];
	w[label="white"];
	b[label="black", fontcolor="white", style=filled, color="black"];
	g[label="grey ", fontcolor="white", style=filled, color="grey"];

	nodesep = 1;

	w -> g[label="push"];

	g -> b[label="pop"];

	b -> w[label="sweep"];
}
#+end_src

#+RESULTS:
[[file:gc-3-color.png]]

但是在主程序和 gc 交替的过程中，主程序可以随时修改对象间的引用关系，
这就给 gc 带来了困难。

比如以下情况，A 已经标记为黑色，B 标记为灰色，

#+begin_src dot :file gc-problem-0.png
digraph {
	node[shape=box];

	a[label="A", color=black, style=filled, fontcolor=white];
	b[label="B", color=grey, style=filled, fontcolor=white];
	c[label="C", color=black, fontcolor=black];

	{rank=same; b; c;}

	a -> b -> c;
}
#+end_src

#+RESULTS:
[[file:gc-problem-0.png]]

在 gc 间歇期间，主程序修改了对象间的引用关系，
B 不再引用 C，而 A 开始引用 C。

#+begin_src dot :file gc-problem-1.png
digraph {
	node[shape=box];

	a[label="A", color=black, style=filled, fontcolor=white];
	c[label="C", color=black, fontcolor=black];
	b[label="B", color=grey, style=filled, fontcolor=white];

	{rank=same; b; c;}

	a -> c;
	a -> b;
	b -> c[color=invis];
}
#+end_src

#+RESULTS:
[[file:gc-problem-1.png]]

虽然 C 也是可达对象，但是由于断开了 B 到 C 的连接，而 A 已经是黑色，
所以 C 无法被标记为灰色继而黑色，所以本轮 gc 会被回收，最终造成 A 对象的空指针引用，
这显然是不正确的。

所以算法中引用了写屏障（barrier）技术，来解决这种问题。

- 当黑色对象引用白色对象时，将此 **白色** 对象标记成灰色，称为 barrier forward
- 当黑色对象引用白色对象时，将此 **黑色** 对象标记回灰色，称为 barrier back

两种方法都可以解决上述问题，在 Lua 内部两种方式都有使用。

#+begin_src dot :file gc-3-color-with-barrier.png
digraph {
	node[shape="circle"];
	w[label="white"];
	b[label="black", fontcolor="white", style=filled, color="black"];
	g[label="grey ", fontcolor="white", style=filled, color="grey"];

	nodesep = 1;

	w -> g[label="push"];
	w -> g[label="barrier fwd"];

	g -> b[label="pop"];
	b -> g[label="barrier back"];

	b -> w[label="sweep"];
}
#+end_src

#+RESULTS:
[[file:gc-3-color-with-barrier.png]]

读者可以思考一下，为什么只在黑色引用白色时会出现问题。
（排列组合，白->白，白->灰，...，黑->黑）

** double white

Lua 内部更进一步[fn:1]，引用了双白色，加上灰黑，也就是 4 种颜色。

双白色的目的在于，在一轮 gc 的过程中，主程序会新建新的对象，新建对象用另一种白色来标识。
这样在此轮 gc 最终回收的时候，只回收原有白色的对象即可，不会涉及到新建对象。

同时，最终黑色会被标记为另一种白色。

#+begin_src dot :file gc-4-color-with-barrier.png
digraph {
	node[shape="circle"];
	w[label="white"];
	ww[label="other\nwhite"];

	b[label="black", fontcolor="white", style=filled, color="black"];
	g[label="grey ", fontcolor="white", style=filled, color="grey"];

	nodesep = 1;

	w -> g[label="push"];
	w -> g[label="barrier fwd"];

	g -> b[label="pop"];
	b -> g[label="barrier back"];

	b -> ww[label="sweep"];
	w -> ww[label="flip", dir=back];

	{rank=same; w; ww;}
}
#+end_src

#+RESULTS:
[[file:gc-4-color-with-barrier.png]]

如果开始下一轮 gc，需要将所有 other white 翻转为 white，回到起始点。

但是这样代价比较高，Lua 直接使用标识 =g->currentwhite= 来表示当前 gc 处理的白色类型，
这样就只需要翻转 =g->currentwhite= 即可。

* bit

下面来看 gc 算法是如何和 Lua 内部的对象关联起来的。

回忆 object 章节，

#+caption: lobject.h
#+include: ../../lua-5.1.5/src/lobject.h src C -n 39 :lines "39-44"

每一个 GCObject 都有共同的 CommonHeader 字段，其中 marked 就是用来标识对象在 gc 过程中的状态。

#+caption: lgc.h
#+include: ../../lua-5.1.5/src/lgc.h src C -n 41 :lines "41-62"

#+begin_src dot :file gc-bit-mark.png
digraph {
	m[shape=record, label="
	  {  | 7 } |
	  { super fixed | 6 } |
	  { fixed | 5 } |
	  { weak value | 4 } |
	  { weak key / finalized | 3 } |
	  { black | 2 } |
	  { white 1 | 1 } |
	  { white 0 | 0 }
	  "];
}
#+end_src

#+RESULTS:
[[file:gc-bit-mark.png]]

marked 字节中，前 3 位标识了颜色，任意时刻最多只有 1 位为 1。
当 3 个位都为 0 时，表示灰色。

* state

Lua 内部的 gc 过程分为如下几个状态，

#+caption: lgc.h
#+include: ../../lua-5.1.5/src/lgc.h src C -n 14 :lines "14-22"

不同状态间执行不同阶段的 gc 操作，

#+begin_src dot :file gc-state.png
digraph {
	node[shape="circle", width=1.3, fixedsize=true];
	rankdir = LR;

	pause -> propagate[label="push"];
	propagate -> sweepstring[label="pop"];
	sweepstring -> sweep[label="sweep"];
	sweep -> finalize[label="sweep"];
	finalize:s -> pause:s[label="sweep"];
}
#+end_src

#+RESULTS:
[[file:gc-state.png]]

Lua 内部通过 =g->gcstate= 来记录当前的状态。

* phase

gc 模块内部通过 =luaC_step= 来推动整个 gc 过程，

#+caption: lgc.c
#+include: ../../lua-5.1.5/src/lgc.c src C -n 610 :lines "610-633"

其中调用 singlestep 来进行每个 phase 操作，其中统计处理的对象空间大小的和，
达到阈值就结束此次增量 gc 过程。

#+caption: lgc.c
#+include: ../../lua-5.1.5/src/lgc.c src C -n 556 :lines "556-608"
  
** push

push 阶段从 root 开始，

#+caption: lgc.c
#+include: ../../lua-5.1.5/src/lgc.c src C -n 500 :lines "500-513"
   
从 markroot 可以看出，gc 中的 root 从 mainthread registry globalState 开始。

** pop

pop 阶段的主要入口在 propagatemark，

#+caption: lgc.c
#+include: ../../lua-5.1.5/src/lgc.c src C -n 273 :lines "273-321"

其中针对不同的对象类型，进行不同的处理。

** sweep

sweep 阶段通过 sweeplist 遍历并回收白色对象，

#+caption: lgc.c
#+include: ../../lua-5.1.5/src/lgc.c src C -n 404 :lines "404-429"

最终通过 freeobj 回收相应内存空间，

#+caption: lgc.c
#+include: ../../lua-5.1.5/src/lgc.c src C -n 378 :lines "378-401"

* barrier

=luaC_barrierf= 和 =luaC_barrierback= 提供了 forward barrier 和 backward barrier 的实现。

#+caption: lgc.c
#+include: ../../lua-5.1.5/src/lgc.c src C -n 661 :lines "661-683"

在 Lua 内部，只有 table 对象使用 backward barrier，因为其作为容器，
引用其它可变动的对象比较多，置为灰色就不用一直触发写屏障，提高效率。

* TODO g->*

g->rootgc
g->gcstate
  
* TODO weaktable

* practice

| 章节涉及文件 | 建议阅读程度   |
|--------------+----------------|
| lgc.h        | ★ ★ ★ ★ ☆ |
| lgc.c        | ★ ★ ★ ☆ ☆ |

[fn:1]: http://wiki.luajit.org/New-Garbage-Collector#gc-algorithms

